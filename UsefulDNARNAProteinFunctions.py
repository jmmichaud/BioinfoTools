#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 10 12:49:18 2018

@author: jennifermichaud
"""

def ProteinTranslation(rnastring, codonAAdict):
    """ Inputs an RNA string, and a codon amino acid dictionary with 3 letter RNA 
    codons as the keys and one letter protein codes as the entries.
    Outputs the protein sequence as string of one letter protein codes.
    """
    proteinseq = []
    for j in range(0,len(rnastring)-2,3):
        codon = rnastring[j:j+3]
        if codonAAdict[codon] != "":
            proteinseq.append(codonAAdict[codon])
        elif codonAAdict[codon] == "":
            proteinseq.append(' ')
        elif codon not in codonAAdict:
            print("Error: Invalid Codon")
            proteinseq.append(' ')
    return "".join(proteinseq)
                    
codonAAdict = {}
with open("RNA_codon_table_1.txt", "r") as textfile:  #codon table as n\ separated codon/AA pairs, ie 'AAA K'  
    RNAcodonAA_table = textfile.read().split("\n")
    for pair in RNAcodonAA_table:
        temp = pair.split(' ')
        codonAAdict[temp[0]] = temp[1]

## TEST DATA    
#RNA_in = 'AUGGCCAUGGCGUCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA'

#RNA_in = 'AUGGACAGUUACAUGAACCGCAAACGCUCUGGUGUGUCGGAUUCGCACUACGACCCCCAAGAGGGUCGAGGCUCGAUCUGUGAGCCAGAUGCUAAGCUCGCUCGUCUCUGGUCAAUCAACAGCGAUAGUAUCAUCCCGCGAAUGGCGCAAGCGGGGGGAGACCGUUGUAAGAGCCAGGCACGAAAACUAAGUGUCAUAAAAUGCCCGCAACCCGCUACACGGAACGCGACUAUGGAUGGUGUAAAGCUGGACUCAAGAGUCUGCCGUGGUGACAUCCGCCACCAUACUCAAAUGAGAUCACGCGUCAGUGAUCGGAAUACGAUAUGUUGGGUCGACGUUUCUAGUGUAUCCCUCUGGGUGAGUCAGCAGUGUAAACCUCAGCGUAAUCAACUUAGAUUACCAUGGUUCGUUGCUUCGCGUGCGGGAGGCCCCGAUAUCCAUAAGAGUCGCUUUCAGGGCUUUACCGCACUCGCACUCUUCCACCUUAUAACUGGAACUAAAGUUGAGUUCCACUUCCACGGGCGGGCCGUAGUUUCCGGCACGCACGGUUUCGAACGGUUUGAACCUAUACAUACAGGACCGCUUCUCCGAGUGGGCGCGUUCGUGGGGCGCCACAAGAUAGCUGGUAAUAAUCGGAUGGAGGUUGCCGUGGUAGCAAACCCUUCGAGAGCAGCCCACCGUUCCAAAAUGGCAUACCUUCUUGGCGUCUGUGCCAUGAGUCGACGUGAAGCCAGGCUCACGGAGCUUAGACGUGUGGAUCCGAGGUAUGCGGCCGUAACAUUUCAUGUGGCCCGCUUCUUACAUCCACCGUGGUUACGCGUCGCGGGUUUCAAAGGUUGCUUUCUAGAGUGUCACGAGACUUCUACGGGUAAGGAAAAUACGGUCAUCGCAACUCCUCUAAGCUUCCUGCGUGGGAAAGGAACAUGUCGCAGAAACUGGAGGUGCCGUUUAAGGUGUGGCCGCUUAAAAUCCAGGUUAAAAGGGUGGAUAGCGAAUAAUAGUGCAUGCUAUCUAGACGCCACGAAACUAAAAGGCCCCGCCGUUGUGGGCGGCGCCAGCAUAAACCAAACGAGCGGUCAGGGACCGUCCACCCGCGGAGCCUGUGACGCGCUUAGUGCAGUUUCUAUUGUUGCUCGGAAAAUGAUUCCAUUUGGCUACAACAACCUCGGCUGUUUAUGUGCCAAUUUGCGGACCGGAGCUUCGUAUAUGGAAAUGCCUGCGCGACCGUCAACUAGGUCGAUUGUAGAUGAGUGCUCCUACCGGCAAUCGUGGAACCCUCAGACUCAAAGGACAACCACUGGUGGGCACAUCCAGGAAAACCCUAUUGUAUACAUCGGAUCGAACAGUGCCUUAUCAAUCCGAUCGACCCCAGCAAUCGGCAACCCAGCUUCAGGUGGGUUUGCUCUAAAAAUGCGUACGACUACGGAUGCUCGCAUAUCCAUAUACGACCGCCUAGAAGGUCAAGAGAUCAUCACACUUCUGAGUACUACCAGAGGAGACAGAUCAAAUAAGCAACACCCAGGAGAGGUGCAUACACCACUGAAUAUCCGAGCAGUGCGUUUAGAUGAGUUGUUUCAGGCUUUGACAGCUAGCCCGGCUUGGUUUACAAGAAUUGCAAAUUUGGCAAUGCUGCCAGCCGUGAUUUUUACAUUAGAAUCUUCUUCGCGGUUAUCGGCUGCACAUCACUUAUUUACAUCGACAAUCAAUCACAGAACUCGUUUAAUGGACAUAGGAGACCACGAGGGGACGCGUUUACCCACUCAAUGGGUGAGGAUUGAGUACCGCAAAGAAAAUUCAGGGGACAUAACGGUAUACAUUUACUGUAGACAUCACCGGUAUUCCGGGUUGAAAGGGCUUUGGGUCAUCUAUAUCACUGCCCGAUGCACUGGUGCUUCAGGUGCUCCUAUGUCUAUGUGUUACCUCACGUCACUUCGAGGUAGGUUAGCACUGGGUACUCGGGAGCGCCCCUAUUUGACUUGCGGUCGCGCUUGCCUUCUUAAACUAGAUUGGUAUUUACGGCCCUACUGCUUUAUUAAGCUGCCUUCCUAUCGCAGUACGGGGAUUGGAGAAGCUUAUGACAUACUCGCUGGCACCGAGGUGACACAGAUACUCGCGAAUACUUCUCUGAACCAGCCCGCUUGCGUAGAAACGUACAAGUCUUUGAUCUGCGCGAGUGGUACACCACAGGCGCUUGUUCGCCCUUGUGAUUGCUUUGUUUGCGGUAGGAAGAAAAGGGGAGUCUUCGGCCGCGAGGUCCCCGGAAGCUUAAUGUGUAUGGGGGGCCAGAAAGGCAACUCCAUUGCGUCUGAAAAGAUAUAUGCCAUUGCGGGGCGGUUUGGAACGGGGGUUCAGCGCACAGUAUACAUUGGUCGUACAGAGGUCCCUGCUACGUCACCAGUUACCAUUUCAAUAUCAAAUCACCUCGGGAAGACACACGUAUGGGCAUUGUAUGCGGUAUGGUUGGGUACUGUCGCAGAUCGUAAUGGCAAGAAUACCAACAGUGUACCUAUAUUAAAUGAACUUUCGCGGGACCCUCUGUGUGGAUGGGUACCUAACGGAUCUUAUAUUGGAUCUAGGCAACUAAGCACACGGUGCCCAUUGAUAAACAAGGCGGCAUCCUAUUUCAAAGUAACCAUCGGCCAAAAGAAGCCGGGGGAUGCCUCUACCGUUCUCAAUUGGUGUGUCUGCCGCUCGACCAAAACCCUAAUAUUAGGUGUCCACAGCCCCACAAGCGGGCUACCGUUCGCGCCUGACUCGGUAUUACUUGUGCUUUCUGAGCCUACAUCCGAUACCUGGCAUGGGCGUCCUGAAGGACGCAGGACAAGUUUUCGGCCGACGGAGCUGAACUGCGACCCACGACCACCCGUCUCCAGUCUGCGCAAACCACUUGCCUAUACUCUGUGGAAGCACAUGUACUCGGGGGCGAGGAUUCAACCAGGGCUGGAGACUGGGAUGAAUGGCAGGAUUUACCGCGGAGGAUCGUCCUGGCGCUACCGCACGGAAGUCAGGAGUUUUCCCCGAAAUUGGGACGCGCCGUAUCCUAGUUCCCGUCAUGUUUGCCGGAACCCGAUAGCGAGGAACCCCCUCUCGCAAACGCAGAAACGAAUGCAGGCCGACAAUUUGAAACUAAGUGAACGGCGCCCAAAGACCGAUCCAAAGUUAUUGUGGGUGAAGCUUGAUAUAGAAAAUACUAUGCCCUCAUACGUUGCGUCCCCUGACGACGUAGUGAUGUGGCCUGCAAAUACGUCAUACCAGGCUAAGCAGUCAUGGACCUCAACUCAGUUUCACACAGCCUACUUGCAUAUCACCAAGCAUCCAGUCCGGUGCCUCCUACAAGAUUGGUCUCAAGGAAAUAAUAAUACGUAUAGGCAAGGUCAGUGGACGGUGGUUAGCUACCCGGUCGGCGCCAGGCCAAUUCAGUUCUUGCUGCAAGUGGUCCGACUAGUGACUACGAGUUCGAGAGUAGGGGGUUUCUGCACCACCGACCUUGCGCGUGAGUCCGUUCCUGUGACACAGGAUAAGCGUAAUUUGCUAAGCCGACCCCUACAAGAAAAACCGUUUUCCAUCCCUGACGUACUUUGGUCGUAUCCAGUUUUACAGAGAUCUUCUCGACUCUUAGAAGCUGUAGCUAAUGCCGGAGCAAGAAGAAGGUCCUCCCUCCCCGAGACCCGGCAGUCGUCAAGUCCAUUCAGGGGCAACUCAGAUCGUACAUCGGACUCUGUGUUGUGGCGUGAACUGGACUCUUUAUCGGAGGCUUCGUGGGGCCAAGAUCACGCUUCGCCUUGCGUUCAUGCCCACAGGAGCACGCCGGUUAAAACCGGGCCCGGUCACCUUGACCGGGUACUUGCCCUACCGAUAGCACAUUCGGCUUUCUCCAGUGCCCUCCUUCAAGUCCGAUACUGGAUUCUCAGCAGGGACCGAGUUCGUACGGCCCGUUCGAUUACUCCCUUCGUGCUUUUAUUUUCGUGUGGGACGCAUGGGGUUCCGCGAGGUUUUAGUAGGCCGCGUCAUGGACGAUUAACUACGCCAACACAGCCUUACUACAUUAUAAUUGUUGAGACAAUGAUUGCCUUGGAUGACCAUAGUUCAUUGUUCAAAAACAUAUUGCGCUCAAUCCACGGGAUCCUUCGAACUGAUGAAGACUUUGUAGAAACCAACUUCAGUUGGUUGGGUCCUGACUGCCGAUCGUUAGCGGAAGUCCCCGGAGUGCUCUGGGAUGGCGGAGGGGAUCACGCUCCGGGGAACCUUAAGAGACCUAGGCGUUGUGAAUAUGAGACCUUCGCCCUACUGGAAGAGCAAACAAUGCCCUUAAUAAACUGGUUACGUGGUCCCUCUCAUAUUCUCCGAGGCGCACAGACUGCAUCCUUUGGGAUCGCAACAUUGCGCGAGGGCGCCUCGGCAUUCAGCAGCCACACUUUUAAGAUUGGUUCACUCGGCUGCUGGGGUCUUCACACCGUUUAUUACCCCUUCGUGGUAACCGCCCGGUUGUCGAACCUCUGGUAUGAUUGCGUCGUCCCAAACGAGCCAAUGCCAGCACAGGAAAUCAUACGUCAAAACCCUAUUCCCUCAGCGACUGCGGGCCCGUUACUACGAGUGAGAGAGCUAGGUCUCGGAGAGCAUUCGCAGCCUCCCCAGGACUUAAGUGUUCCUGGGGGGAACGUGCCCUCAUGGCUGGGGAAAACCCUUAAUAGUACGCAGCGAGAGGUUCCAGUGCACCACUCUACAUUACGGGUACCGCCUCCCCAAGAUCAAAGCCGGCGGCUCGGCAUUUCGGUAAACAACCUGUUCAAAGCGGCAAACAUUGCUUCCAUCACUGAGUGCCCAGGACUCGUCGCCCGGGACCAAUACGCAGAGGCAGCCAUUGAUAGCUGGGUGCCAGUCCCGCUUCAAAUUAAAGGAAUUCCUUGUGUGAGCCCACUAAGGGCAUUCGGGGUGCGAAAUCAUAGAUUAGAACAACGGUGCGCAAAACGAAGCUCGCAAACUACUGUAUACCUGGGAUUCGCGUGUCAGCCCACUACCCCCGUAUCUCUUGUCUCAAUUUAUAGCUAUUUCCAUGAUGAUGGGUAUUUCUCGAACGCAACGUUCCGGACAUUGGUCUUCAUCUCGGGAUUGACGUACAACUUGUUCGUAUGUCGUAGGCAACGGGAUCCAGUUGCUUUGACUUACUGGCCGCACCACCUGUUAGGGGCCCCACGGAACCGUCUCUCUGAUGCUUGGUGCUGCAAUGCGGCCGUCUCUCUGCGGGUGGAACCACCGCAAAAUAAGGUCUCACUAGACAAAAAUAUAUGGCUCCGCAGUCGCCGCCAUGGCCGUGGGUUACUACUUCAGCAAGGGGCGGAGAGCGUGGUUAGCUGGCCUCCUUCAGGUCCCAUUUUUCACGCGCCCCAAAGGACAGGCUGCGAAACUACAGUCCCUGAGGUUAUUGUAUAUGCCGCUCAUGUGCUUCCUCCCUUGUCAGUUCAGAUUAUUCGCGCGAAAUCGCCCGAAGAGUUCGAUCCAAUAGCGUUUACGGCAGGAGCAAGCCUAACACUGCAUUUUCCUCGGAAUGCUCCAUCAUUGUACCGCUGCAACAACUAUCCGUCCGAAGGACUGUUUAACAGGCAUCCGGACACUCGCCGGAAGCGAACCACCACCGCUCCGUGGUUCGUACGAGGGGGAUCACUCAGUUCGGCUAUCUCACGGUACGCUUUCAAAGAUUUCAUGUGGACGCUUUUUAGGGUGAAGGCGGCUUUCGCACUAGAUGACUUUCGACCUGCUUGUAGCCGGGUAGUUAUCCCAACUGCUCCUAGCGUGAUGUCCAUCCCUUUACAUUCAUCACUUCUCCCCCAGGUUUGGCGUCGAUGCGGGUGCGCAUUUACAUUAAUCGACUCGCUCCUAAACUCGUCCAAAACGCGCUGGAUUAUCAUUUGUCUAAUAGAAAGGGGGUGGGGCCUUUUAAGCAGCUGGACUGCCGUGUCGCUUAGAGUGAUUAACCUUCGAAGAUUAAGACCACUCGCCCAGACCGUAUUUACUGUUACGCUAUUGGCGCACACGGAGUUCAUCGCAGUUCAUAAUAAUGUACGACUAUCUGUAGCACAUGUAGUACCGGAAAUAGGCGAGUUGCGAGAACCGACCCAUCCCUGGUCUGGACACGAUGCGAGCUUUUUGCCCACCCGCGUUAGGCUUACGUCGUCACAUUUCGUUGCUCCGCCCAAAUGUCGACAACCGUCCGUUAGUUCGCAUCAUACCCGCAAAAAAGACCUCGACGGAGACCAUGUGGAAAACUUGAGGAAAAGCAUCCUGGCGAAUCUGGUCGACGAUGAAGCCUGCCAGCUAGUUGUAAGCAGACCCCUUCCAAAGGGGGUUCCGAUUCCAUAUCUUAGAGCAAAAAACCUUCGGGGCGCUCCACCAAUCAGCCGUAUGUUCGAUGCACCACUUCCCGCGCGAUGUCUCCUUGGCUUCUUUGCUUUGCGCGAUAGGGUCCCGGUGUGCCGGCGCAUUCUCUGUGAUCGUCGCAUCCUGUGGUAUGUUUCAAGGCACAAAAGAACUCACGCCGUUACGCGUACACAUAAUGUACCAGAAAUAUGGCGGAAUCAUAUGCUGAGGCUGCAACCUGCCAUCGUGAGUCUAGUGAGAUAUGACAGGACGCAAAAAGUGUUACACGCGCGGCCUCGAUCCAGUCAAGCAAAGUAUAUCUCGGCCCCCCAUCUGCAAUCUGUGGGAACACUGCUCCCCUCCAUUGAAUCUUCUCAAACCCACUCCUCACUAGCCCGACCCGCUGAAUCGCGGCGACCAGACGGUUUACUGCCCAGGGAGACUGGUGAAAUUAAGGAGGCUCUCGCAGGGGUCUACUUAAAAUCAUUCAAACACUUAAAAUCACCAGCAUGGAUAUCCCCGACUGCGCAAGCUCCGAAGCUGACCUCAGAGAUGCGAAUAGGGUAUAGGCGUAAUUCCACUAGCUCGAACCCCCGAAGCGAUCUACUUACAACGUUAUCAGACUCUCCACGUCGUCCGGACAGAAGUUCUGGCACAGCUGUGAUGUGCAGGAGUGCUUUUACGCGGCUCAAGUGUGAUCCUACGGAACACCCGAAGGGAAGUGUACGGUACCACCUCGUGGGUAACAUCCGCUCUAAGCGGAUAAGCGGAAGGGCAGUCUAUCUCCGAGAGGUGUGGCACUCAACUGAGGUCAAACACCCAACUGUCCUUUGGGCGUCCUGCUCCAGGCAACGAUAUAGGACUCUAGACGCGUGCCUGAAAAGGUCUGAUUUGGUUGAAACUACCAAGAUAGUCGCGUGCGUCUUAUUAAUAAAAGGGGAUUUCUUCAUUAGGGUUCUACCGCCUUGCAAACAUCAUUGUGGGGAGUCACGUAUGCAAAUGCUCAUAGCGGAUGGAAAUAACCCUCAGUGUCGCACACGAUUUCGCCUAGGGCCGUGGCUUGGGAUAGCGAAUCGCCAAAGGUCUCGACUAUGCCCACAGUUGAUGCCGCACUCGUCAUACGGCGUGAUCUAUACCUUAGAUAUUGUACAAAUCUCCAUUGGAUUUGGAACUCUUUACAUCGGUAUUGGAGAUAAUAGACUUGCCGUUUUUCAAACACCACUAACGUCCAACUCCUCCGUUCCGAUAUCCCUGGGAAAUCAAUGGAUGGGGUGCCGCGUUCGAGGUUGGAUAGCGGACAUAAUCCUGCCGACCGAACCCAAGAACUUGGAUCCGAGGUACAUCGAUGAUAUUCGGGAAAUCCCGCGAUCUGGUCUCCUCAAUCUUGGAGACGAAUUGACGCAAAAAAUUCGACCGGCUAUUUGCCUUCUCAACGCUAAGCAAGGUAGCCACACGUCGAGACUGAGCUCCCUGAUACCUGCACAGCUGUACUAUGGACUGAGCUCCAUCCCUCUCAAACGUGGACUCUUCCACCUCUUACGGUUGUUCUUGUUCGACGGCUGCCCCCCUGCAUUCCGGUAUUAUAAGGUCAUGCGCGAGCCCCAGGUCAGUCCCCGGACUGGAUUUGUUCAAGGGGAGACUUCAAGCACAGCGGUAGUUAACACAAUUAUCCUCGUUACACGGGACCCACCCGAAGAUCAUGAUAGUUUCAUCCAGGGAGCCAUGCUCCACACCUACAAACUAUCACGCACUCAUAGCAAGUAUUGGAUGACAUGUCGUCUUUUGCUAGCAAUUUCAAAGCAAAGCGCAUCCACUAUGGGCAGCAUCCGUUACCUGGUUGUGCACGAGUUUCCACAUCUUAUUGGUCCGUGCAGUAAAGUCAGCAAUCGGCAGCUCUCAAGCGCAGACACGAUAAUGAAGGCUUCGUGCCCUAACAAUGUAAUCGUAUCGUUGUUCAAUACAGAGGCUAAAAUUGUCAACUGGAGGGGCAUGUGCUACAGCUAUCGUCCUCUGGACCUGAAACGCAAAUAA'

#RNA_in = 'CCGAGGACCGAAAUCAAC'

#print(ProteinTranslation(RNA_in, codonAAdict))    

def ReverseComplement(text):
    compd = {'A':'T', 'T':'A', 'C':'G', 'G':'C'}
    revtext = text[::-1]
    revcomp = []
    for let in revtext:
        revcomp.append(compd[let])
    return ''.join(revcomp)

def DNAtoRNA(DNAstring):
    """Input DNA sequence, output transcribed RNA sequence"""
    RNA = []
    for base in DNAstring:
        if base == 'T':
            RNA.append('U')
        else:
            RNA.append(base)
    return ''.join(RNA)

def RNAtoDNA(RNAstring):
    """Input RNA sequence, output DNA sequence"""
    DNA = []
    for base in RNAstring:
        if base == 'U':
            DNA.append('T')
        else:
            DNA.append(base)
    return ''.join(DNA)
    

def EncodingSubstrings(DNAstring, peptide):
    """Inputs a DNA sequence and a peptide sequence.  Outputs substrings of the DNA
    that encode the inputted peptide including reverse complement strand"""
    RCstrand = ReverseComplement(DNAstring)
    FRNA = DNAtoRNA(DNAstring)
    RRNA = DNAtoRNA(RCstrand)
    substrings = []
    for i in range(0,len(DNAstring)-2):
        Fpeptidestr = []
        RCpeptidestr = []
        n = 0 
        for j in range(len(peptide)): 
            Fcodon = ''.join(FRNA[i+n:i+n+3])
            RCcodon = ''.join(RRNA[i+n:i+n+3])
            Fpeptidestr.append(Fcodon)
            RCpeptidestr.append(RCcodon)
            n += 3
        if ProteinTranslation(''.join(Fpeptidestr)) == peptide:
            substrings.append(RNAtoDNA(''.join(Fpeptidestr)))
        if ProteinTranslation(''.join(RCpeptidestr)) == peptide:
            RCsub = ReverseComplement(RNAtoDNA(''.join(RCpeptidestr)))
            substrings.append(RCsub)
    return substrings