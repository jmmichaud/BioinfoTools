#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar 30 15:44:25 2018

@author: jennifermichaud
"""

    
def ShortFreqArray(text, k): 
   """Inputs a string of text and an integer kmer length k.  Generates a frequency array 
   as a dictionary where the key is the kmer and the entry is the count.  Avoids
   generation of every possible kmer of length k in the frequency array.""" 
   kmer = ""
   Freq_array = {}
   for i in range(len(text)+1 - k):
        kmer = text[i:i + k]
        if kmer in Freq_array:
            Freq_array[kmer] += 1
        else:
            Freq_array[kmer] = 1
   return Freq_array
  

        
def EfficientClumpFinding(Genome, k, L, t):  
    """Inputs a DNA sequence or genome string, a kmer length (k), a window or 
    clump lenth (L), and a minimum number of occurences (t). Outputs all kmers 
    that occur within L-length windows that occur a minimum of t times within 
    a L length window.  Utilizes an efficient frequency array dictionary of the first
    L-length window as a basis and alters the dictionary based upon sliding one 
    base at a time and changing the frequency of only the first and last kmers 
    in the window."""
    FrequentPatterns = []
    clump = Genome[0:L]
    Freq_array = ShortFreqArray(clump, k) # generate base freq array dictionary from first L-length window
    for key in Freq_array:
            if Freq_array[key] >= t:
                FrequentPatterns.append(key)
    for i in range(1,len(Genome) - L):#slide 1 base at a time and alter frequency array for first and last kmer in window
        FPattern = Genome[i -1: i -1 + k]
        Freq_array[FPattern] -= 1
        LPattern = Genome[i + L - k: i + L]
        if LPattern in Freq_array:
            Freq_array[LPattern] += 1 #add to Freq array if doesn't exist
        else:
            Freq_array[LPattern] = 1
        for key in Freq_array:
            if Freq_array[key] >= t:
                FrequentPatterns.append(key) 
        print("Progress: " + str(round(i / (len(Genome)-L)*100,2))+"%")
    pattern_lst = list(set(FrequentPatterns))  #eliminate duplicates 
    pattern_lst.sort()
    return " ".join(pattern_lst) 

#TEST DATA                 
#text_in = 'AGAATAGCAATCCGGCTATGTCACGCTGTCTCTTCGCCGGACTCTTACGACCAGGCTGCCGGCCTATTGGGGATCTTAGAGTCCCGTTATCCTTAGACTCCCGCTGCGCACCTGCCGGCACCACCCACCATAAAAGGCAGCCCCCAACTATGTTGCACAGAGGGTTTCTCGATTACAATTGATTAACCATGAATTAGCCTCAAGCAAGTGCTTTGCCAACTACGTGCCATATCACGGCAGCTCACTTACTTCTGAGATGTGGCGGTGACAACAATTAACGGCTCCAGTACATATGACCATTTCTCTCAGATTCCTAGTAAACAGGGGAAGTTTCTAAAAGATGTGTATGGTTCCTCGTTGTAACCGCCGTCCGGCCAAGTGATCCTACAGCATAATAGAAAGGATCAGTGTCTCGTCAAGGGTATTGTGGGATGGAACTCGGTAAGAGGCTGTATGTATATACCCCTTGTGTTAGCACGTAGGATTGTACTTCCGCGTTGTGCGTCATGATTTGCACCTGCCGCTTCTCTTCACTCAAAAGCTCATAAAGCGCGATTGTGCAAACCGCCGTATATTTGATCCGGCCCACCAAAAATCCAGTGTATATTGTATACCCGCGAGCAAAGCGAGAAACAAAGCGAGAGCGAGCAAAGCGAGCGTTTCATCGCTCCTGTTAACAAAGCGAGTCAAAGCGAGGCTTTAGACGCAATGGAACCGGACATGTCCAAAGCGAGTAATTGGCTGCAGACTGCAGAACAACCCTCGATGAGGCTGCAGACGCGAGCAAAGCGAGCAAAGGGCTGCAGAGTGGCGGCTGCAGACTGCAGAAGCTCACGTTAGGCGGCTGCAGAGCTGCAGAACCAAAGCGAGGCTGCAGACAAAGCGAGGCGGACCAGGCTGCAGACGAGGGCTGCAGAATCGTTACACTAGGGCCAAAGCGAGAGGCTGCAGACCACAAAGCGAGGAGGGAAGAAGAGGGAAGATGACCCTACAAAGCAAAGCGAGAAAGCGAGGCTGCAGAAGAGGGACAAAGCGAGAGGGAAGAATGCGGCTGCAGATGCGGGGCTGCAGAAAGGCTGCAGATGGCGGCTGCAGATGGAACAAAGCGAGCGGTGCTAGGCTGCAGAGACGCTGTAACGAGGGACGGCTGCAGATGCAGAAAGCGAGACAAAGCGAGCTACGCGAGAGGGAAGACAAAGCGGCTGCAGAGGGAGCTGGAGGGAAGAGGCTGCAGATGGGCTGCAGAAAGGGCTGCAGAGCGGCTGCAGAGGGCGGCTGCAGAGCGAGGGAAGAAGAGGCTGCAGAGGGAGGGAAGATGCGTGAGGGAAGACGGCACGCTCCACGGACTGCTATTGCGAGGGGAGAGGGAAGAGAAGCCATCTTCGCCTGAGGGAAGACCCACTATTCGATAGGTGCTTGGCGAATGTCACGGTCGAACCATTTTAGAGGGAAGAGGGAGGGAAGAGGAAGACAATGGTGAGGGAAGAAACGGTGGCGGTAAAGGAGCTTATTACTGGTGATCGGTGAGGGTGGGCTGGAGTTTTCTCTCGCGGAACGGTGGCTCACTGATCGGCCGGAGAACAATAGTCGTCGCAGACGGGCATAAAAAGAGTTCAGACCCCTGACCGCTGTAAAAGGACAACCTGGTTGTCGAGTGACGCGCTTCTGATGAGCCACCTAGTTGTGGTAGGTGGCGTCGCCTGGTGAGGACTACTTAAGAAGCGTGCCGCGTTCATCTTCGACGACATTGTTCTTCGTCTTCACCACACTCATAGGCCTGAAACCCAGTAAACCACGATCCGAAGGTTCTTTTTACTATTCACCAGGGCGCCCCCGCCTTATAGGCATGTTGGGGGTCGGTGCTCGTATGCAAGAGCGGATAAGTCATCTTAGATGTCCATTCAGACTATCGTTAAATTTTGTCCGATCATATGTGGGGTTTCATAAAGGTTGACAGGCTCAATAAAAGTTCTTACTTTAATGTACCGTCGACGTGCACCCCTCTGACTTCGAACGAGTGAGTCCTTAAAAAGTGACGCTGTAAGTACAAGCGGCTGAATCTCCAAGTTGACCAACCCCCTCTCCTGCGTCCGATCGCGATTCACGCTGCTCCCTAAGAGCTAGCTCCTCCCCAGCTCGCGATTCATTAGCTCGCGATTCGTCGCGATTCGTCGCGATTCATTCGGATACCGGGGACCTTCGCGATCGCGATTCCGCGATTCGGCTAGAATCGCGATTCGCGATTCGATTTCGCGATTCAGACTACAACTCGCGATTCATTCGTCGGTGTGGAATCGCGATTCGTTTTTCGCGATTCGGTTCTTACACCAGAGTGAGTCTGGTCGGTATTGAAGTACTCGCAAATCTCCGAGTCTGTCGCGATTCACCAGTGAGTCTGGAGTCTGGTATACCTTTCTGCAGTATCTCGCGATTCTCGCGATTCGGAAGATCGCGATTCCGAGTCTCGCGTCGCGATTCGGTACGATGTCGCGATTCGGAGTCTGGTGATAGTGTTCGCGATTCTCTGGTTATCGCGATTCTGGTTCGCGATTCAGTTTTTGACGGAGTTCGCGATTCGCGATTCTCTGGTTGATTCGCGATTCAGACGCGAGTCTGTCGCGATTCGGTTCTGGTGTTTACAACTCAGTCTAGAATGGTCGCGATTCTCGCGATTCTATTACTTACCTGAGTCTGGTGAGTCTGGTAGCCGAAGTGCACAGACGAGAGAGTCTGGTAAGTTTGTGAGTCTGGTATTGTGCATCTGAATTAGTTAAAAAGGAGTCTGGGAGTCTGGTAAGAGGTAGGCGAGGGAAGAGTCTGGTGCCGAGTCTGGTTTATAGAGTCTGGTTTTGTACACATAGAGTCTGGTTGTCTTACCATCGCTCTAACTCTACATGCTTTTGTCGGCGATACCTACTTGAATCGGGCTAAACCCAGGACCTAGAGTCCTTCGGGCGAGCAGTCTTTTAACACTTCGTAGGGGTGTGCAGCTAGACACGTCCAACACCGCATAATCGCAGTATTAAACCAAGATAGAGAGCCATCTGCTATATTTTTCCCGTGCTACCACAAATCTGAATCACTCCACCCGGTCGGAGCTTCGGATGGGCACATACACAAAGAATAGACAGTATGAAGCCACGGCGCCCGTGGGGTCCTAGATTGATAGGCTTGGATAAGTTTAAGGGCTATGTGGATGTGCTCTTCACGATGGCGTTGAGTGCGTAGTTGCTAACTACGCATGTAAACAATACCCACCAGTTGGTCTGTCAGGTAAGGCCCTTTCAAACGAAAAGGACCTTTGCGTGTCTGTGGTCCGCTGAGGGACACTGGACTTATGGGCTAGGAGGAATTGATTTGTTGAGCGAGGTTTCCGGAAGTGCTGCAGCAGCATGACTCCTAACAAGAGGAGCTGACCAGAATCCCGCCAGCGGATGGATAAAAGACTTAGGCGGGCGGTAGTAGTATGGCGGTAGTACGGAAACGGAGGGCGGTAGTTAGTTCGGGCGGTAGTTAGTCAACCCGTATCTCTTGTGGCGGTAGTAGGGGCGGTAGTCGGCGGTAGTCACTTGGTGGGCGGTAGTGGTAGGGCGGTAGTTATCAACTGGCGGTAGTTTGATTTGTCCCGAAACATGCATGCATCGATTGGCGGTAGTCGGCGGTAGTGGAAATAGTGGGAGGGGCGGTAGTATGGCGGTAGTAGAGCACGCTATAGTCCGTTACGGGCGGTAGTTCAGTAATTGTGCGGCGGTAGGGCGGTAGTGCGGCCGTGACTGGGCGGTAGTATTTTCAACGGGGGCCGCTGGATGGTCCACTGGCGGTAGGGCGGTAGTCATAATCTACATGGCACTAGGCGGTAGTTAGTCTCGACGGGCGGTAGTTCTTTTGGGACGCTGGCGGTAGTACGGACGCTCCAAGGGGGTGCCGACTAGATGTGCTTAGTTTGAAAGAGGCGGTAGTACGCTCCAGACGCTCCACTGGGCGGTAGTGGCGGTAGTTTTTTTCCGGCGGTAGTACTGGACCCGATTGACGCTCCAGGACGCTCCACAGGATTACGATTCCAGTAATCGTCAAGACCGCGCGGAGGTGGGGGGTAAGACGACCTAGACGCTCCAGCTAGCCCGTAGATTTCGCGATATGGACGACGCTCCACGCTCCGACGCTCCACTGCTGGACGCTCCACAAGGACGCTCCACGACGCTCCAAATGACGCTCCAATTCGACGCTCCACAGTTGCTAGTCGGAGCGAGAGTTTACAGCGGATTACGACGCTCCAGGTGCCGAGGCACGAACAAAGATGACGCTCCAGGACGCTCCAGCCTATGGAGACGCTGACGCTCCAGGTGAGTTGTTAGGGTCTCTGTACCACTGGAGCAGATCTTTTGAGACTTCTTGACGCTCCACCACGAGACGCTCCAAGCTCACAGACGGACGCTCCAGGACGCTCCAGGTAGCGCCGTTTACAAGGATTGGATATCTAGGATGTGGCCTGTTCGTTAGGTTCCTAGACAGAGGCACATCCTCCAAGCGCTCTGGGATATACCTAGTCTTTCCCATTTGATGTAATTAGGAAGACGATCAAAAGGGTAACGGTAGGTCCTGTGCAACAGATGTGGAAAAACTTATGTAACGCCGACGACCCCCTAAGCACGGACCTTAAGATCTTCGCACCACGCGAAGCCAATTGAAGACCACTTTGCCGGAGCGATCCCACATCCCTCAGTTGGCCCCGCCGCCATGACTCTTGGACCATGCTTGCGCCGACCTTCCTTTCGCCGACCTTAACACTGTAGCGTTTAACAGCCGACCTTCTTTTAGGCTACTTCGTCCATGCCATAAGTTTGCGGAAGTGGCGCCGACCTTTAAAGATTCTAGCTGCTTTGCCTGCTACGGGTAGAGCCGACCTTATTGCCGACCTTCCGACCTTAATGAGGTTCATGCGGGGGGCCGACCTTGCCGACCGCCGACCTTAGCCGACCTTCTGAAAGCCGACCTTTTACTGCGGCCGCCGACCTTCCGACCTGCCGACCTTTTCTAATGTAAGTGCCATGCCGACCGCCGACCTTAGTCCCAGCCGACCTTCGCTCAAGCTAAAAGCATCTGCGTTAAACAGGATAGCGCAGCCGACCTTCGCCGACCTTGACTTCGCCGACCTTCTTAGGCCGACCTTGACCTTACGCCGACCTTCGCCTATATCGAAAAGGGGCGTTTGGAGGTGCTGCCGACCTTCCTCGAGGCGTGGCGGTATGTGGCGGGTAGTACGGCCGACCTTGTCCGCCGACCTTTGTCTGCACGATCGCAAGCCCCCGCCGCCGACCTTTTGCCGACCTTTGGAATACATCAATCATAATGATTTCCCCCGTGCGCCGAACGCGCGCGGTCTAACCCATGATCAGAACCGCCCCTTTCGGTTCATTACTCCTACTGGCTAGTATATAAAATGGCTTGCGCAAGAAGGAGCTTAATCGCGACGTCCCAGAATTTATCAGTCTGTGGCACCCTATCCGCTCCCAGCCCTAGCCATACGACCCTCGTCGGGAGGTCTGGGTGACGCGGATTGGATGGATGGTGGTGGTCGGAGATACTGCCTACCATAAGGAATCGCAGATATTTCGCCTGCGTGGGGGTATACGCGACAAAAGTTATCATGTACTATAACCTAGCTAACGTCCTGAAAATAGTCTTCTTCGCTGCGTCAAGTCTGGGCTGCTACTGGGATTCCCGAGAAGGTTTATGCCGATTTCTGATCGCAGTACTCGCCCGGGCGCCATGGGTCTTTATAGTTGCACTTAATTTAAATAGACTCGTATTGCTCAAGTATGCCTCTGCGGACCGCGGTGTATGGAGCGGAAATAATCTGGCGCCATAGACCTGGCAAGAATAATGGTCATACCCGTGCCGATCTTAAGTCGGATCCAAACGATTCCTCGTCTAGTGTGGCGCAGACTGCTAGATGATTTATGCGGCCTATTATGAGTGACCAATGGCATATAAACAGAAGGGTTGAGCTCATTAAAACCCCGGAAACTGGGTTTTAAATCTCCGGTGAGCTGATTGAGCTCTCTCGAAAAGCTGCTTCGCTTTATCTGCTGTCTCCAAGCACATGGCAACTCATGCATCGCTTTAGGCGAAGAGTGTGAACACCAGAGCCCCTTAAAAGGTCACTAATGCGGTGATAAGCCAAAGTCCAGACGTAAGTTATGATGGAGAATTACAGTGATTGGTGTGACGATTGACGCAGAGAGAACGCTCGCCCAACGGCGTTACAAAGTATTGGAAGTCAGTCTGCGTAGGTACAGGGGGTCCTGCAGAACCTTCACCTCCAACCTGTAGCGCTAGGCTTGTGTCAATTGTTCATTCGACATCAACAAGCAGCTATCATGTGGACACATAACAAGTCTCAAAAAAAGTAAGGTCGTTGCCGACTGGAGCAGGGCCGGGATGATTCCGAAATCCCGTGGTGACGACGAGGCAATCCTAACTGGTTCACAGCACCGAACAGACTGGCAACAGTCTAGCGTATAGGCGAACGGACCTCTCACAATGCTGTCGAAGTGAGCAGGTTTCATTCCACGACTCGTACAGAAATCTGTTGCGGCTCTAGGTAACCCACCTCTAGGGAGGTACTAAGCGCAACCGCGTCGGAGAAAGCGGATATCCCATTATACGGTGGAATTTATCCGACTGTTCGTTAAAGCTTGAGCGTAGCCATGGGTGCCCTTCCCTAACATAGAAGAAAGTTGCCAGGTGCGTTCATTTCACCCGTGCGTACAATCTCAGGGACAGGCGCCTAAATCCAATTAGATCCTATGGCTCTCAAACCACCACAGCTGCCAGATTTGAGATTGACTCGTCAGATCGTAACAGACTCAGAACGCGCGTCTGAATCAACGGTTGACTCTCTCTGACTCTCCTGACTCTCATTCACTGACTCTCATAGATACTTATGAAGTTCATCAACGGTATAAATCAACGGTCCTCGGCAAGAATGGATATCAACGGTTAAGCTTTGGCGACATCAACGGTAGAGGGGCGAAAACGAGCATGTGGGCCCATCAACGGTGGTATCAACGGTTTTAACACATCAACGGTTGATCAACGGTAACTATCCGCCCTGACTCTCAGGGTCTGACTCTCTCCTCAGATCAACGGTGGTATCTATCAACGGTGTGTATAACTGACTATCAATCAACGGTCTATCAACGGTGTTACTGTACAATGGAATGATCAACGGTAATGGGTGTGGTGTATAACTGACTCTATATCAACGGTCTGACTCTCATGAAAATCAACGGATCAACGGTTCAACGGTCAACGGTACGGTGTGTATGGGTGTATATCAACGGTTCTATCAACGGTTCTCCTGACTATCAACGGTGGATCAACGGTCGGTCATATTTTCTGACTCTCCGAATGGGCTGCTGACTCTCTATCAACGGTAACGGTTGACTCTCACGACTGACCTGACTCTCGCTGACTCTCGTAGGTAGCAAGCGTCTTTGACAGACGGCTTTCTTGTATGGGTAAAATGGGTGTGTTCATATACAGGGCAATGGGTGTGGGTGTACGTATGTGGGTTCAGTAATGGGTGTCTGCAATGGGTGTATAAATGGGTGTGGAGACAGTGAATGGGTGTTGAATGGGTGTTGTAATGGGTGTGTGTATCGTCACTGGGAAGACGAAGCCGAAGCGATCACTCCACGGTATGTCCTCCTTGGCAATGGGTGTTAGCAATGGGTGTAAATGGGTGTCGAAATGGGTGTACAGGCCAAAATGGGTGTCGGCGGCGATCTGGGGATTATCATTAGTCAATCTGTTCGCGCTTCGCGTATTTCGCTTATGACTTGGATTCCCTCGGTCCTCTTAACGCGCTATTTCTACGAGATTTATGTTCAGGGGGCGGTTTGAGATTCCTCATGACGCTGTGTGCATATAAATGATAAAAAGTATACTCTAGATTCAAAACGTTTAACATTTTAATCACCTGTATTGAAGACGAACACGCAAGTGTCCGAGGGCTACTCCATAATGAAAGGTACTGCCATGCCGAAGACAGACGGGCCAAACTCACTAAGTTTATCCCTCATCCTGCTAGCTACCGCAACTGCAAGGTGACTATATATGATGTTCCCGCCAAACGCATGCTCTCTCTCCTATATTGACACTGACACAGACCAGACCCATACCATAGTAAGCAGACACAGGACACAGACGAAGGAAGTGGACACAGACGAGAGACACAGACAGCGTGAAATACGGAGTGCGCTCGGTGCGACACAGACAGCCCTACACTGGGGCTCGACACAGACCACAGACACAGACCATCCTTAAAGGAAGTGAAGGACACAGACCGTTTAAGACACAGACAACGACACAGACACACAGACGACACAGACGCATGTGCTTCACAGTTTTGATATCGCTCCCGACACAGACTACAGAGGCTCCTTCAAACAACTGAAAGGTAGCGTCCAACCGGATTTGGCGTTGAGTTTGGGACACAGACCCTTGACACAGACCCGCTTGGAGGGCTTATTATCATTAAGGACACAAGCGCCGGACGACACAGACCGAGACACAGACCTGTACTTGCCGAGCAGCCCTAATGATTGGCGTGGATATCCCTTTAGACCTGCGACACAGACTCCCTGACACAGACGCGGGAGACGACACAGGACACAGACCCCAACTCAAGGTATCGGGACACAGACCCTCACGACATCTAGCAGAGACAAAGGCTACGTTGGACACAGTAGCAGAGAACATGAATTAGCAGAGAAGTCACTTCACTTTCAGTGACTGTAGCAGAGACTTAGCAGAGATCACGGTGTATGCTATAGCAGAGAGACGGGAGTCAGCTAGCCACACAGCATAGCAGAGACAGAGAAGAGATAGCTAGCAGAGAGTGAATCTAAGGTAGACATAGCAGAGAAGCAGAGACGTCGCCTCCTTCAGGTAGCAGAGACCCGAGATCCGCCCCCCGTCGCCTCCTAGCAGAGAGAGATCGCCTCTAGCATAGCAGAGACGCTTCCTAGCAGAGAAGCGCTTCCAGCGGTCGCGTCGCCTCCTGCGCTTTAGCAGAGACCAGTAGCAGAGACGCTTCCAGCGGTAGCAGAGATTGTCGCTAGCAGAGAGTCGCCTAGCTAGCAGAGACTCCCAGCGCTTCCAGCTAGCAGAGAGCTTCCAGCGCTTTAGCAGAGAAGCAGAGACTCCGCCGCGGTGTCGCCTAGCAGAGAGTACGCCGCGTACGTCGCCTCCGCCGCGGTCGCCTCCTACGGTCGCCTCCCGTCGCCTTTAGCAGAGACCGCGTACGCCGGTCGCCTCCCGTACGCCGCGTACGCCGCGGGTCGCCTCCGTCGCCTCCACGCCGCGTATACGTCGCCTCGTGTCGCCTCCGCGTACGCCGCGTTACGCCGCGGTCGCCTCCACTACGCCGCGTAGTCGCCTCCCGCCGCGTACGCCGCGTACGCCGCGTACGTCGCCTCCGTCGCCTCCGCCGGTCGCCTCC'
#k_in = 9
#L_in  = 599
#t_in = 18
##correct output = ATCAACGGT GACACAGAC GACGCTCCA GCCGACCTT GGCGGTAGT GGCTGCAGA TAGCAGAGA TCGCGATTC
#print(EfficientClumpFinding(text_in, k_in, L_in, t_in)) 

#NOTES
#Algorithm can also be altered to give kmer and number of occurences within a 
#genome and positions within the genome.
    




    