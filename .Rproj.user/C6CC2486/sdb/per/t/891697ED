{
    "collab_server" : "",
    "contents" : "# # Assign a variable 'female_avg' as the average female height.\n# female_avg <- 64\n# \n# # Assign a variable 'female_sd' as the standard deviation for female heights.\n# female_sd <- 3\n# \n# # Using variables 'female_avg' and 'female_sd', calculate the probability that a randomly selected female is shorter than 5 feet. Print this value to the console.\n# pnorm(60,female_avg, female_sd)\n\n# # Using variables 'female_avg' and 'female_sd', calculate the probability that a randomly selected female is 6 feet or taller. Print this value to the console.\n# 1 - pnorm(72,female_avg, female_sd)\n# \n# # Using variables 'female_avg' and 'female_sd', calculate the probability that a randomly selected female is between the desired height range. Print this value to the console.\n# pnorm(67,female_avg, female_sd) - pnorm(61,female_avg, female_sd)\n# \n# # To a variable named 'taller', assign the value of a height that is one SD taller than average.\n# taller <- female_avg + female_sd\n# \n# \n# # To a variable named 'shorter', assign the value of a height that is one SD shorter than average.\n# shorter <- female_avg - female_sd\n# \n# # Calculate the probability that a randomly selected female is between the desired height range. Print this value to the console.\n# pnorm(taller,female_avg, female_sd) - pnorm(shorter,female_avg, female_sd)\n\n\n# Assign a variable 'female_avg' as the average female height.\n# male_avg <- 69\n# \n# # Assign a variable 'female_sd' as the standard deviation for female heights.\n# male_sd <- 3\n# \n# # Determine the height of a man in the 99th percentile of the distribution.\n# qnorm(.99, male_avg, male_sd)\n\n# # The variable `B` specifies the number of times we want the simulation to run.\n# B <- 1000\n# \n# # Use the `set.seed` function to make sure your answer matches the expected result after random number generation.\n# set.seed(1)\n# \n# # Create an object called `highestIQ` that contains the highest IQ score from each random distribution of 10,000 people.\n# highestIQ <- replicate(B, {\n#   simulated_data <- rnorm(10000, 100, 15)\n#   max(simulated_data)\n# })\n# \n# \n# # Make a histogram of the highest IQ scores.\n# hist(highestIQ)\n\n\n# # The variables 'green', 'black', and 'red' contain the number of pockets for each color\n# green <- 2\n# black <- 18\n# red <- 18\n# \n# # Assign a variable `p_green` as the probability of the ball landing in a green pocket\n# p_green <- green / (green+black+red)\n# \n# # Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket\n# p_not_green <- 1 - p_green\n\n\n# #Create a model to predict the random variable `X`, your winnings from betting on green.\n# X <- sample(c(17, -1), 1000, replace = TRUE, prob = c(p_green, p_not_green))\n# \n# \n# # Print the value of `X` to the console\n# X\n# \n# # Calculate the expected outcome if you win $17 if the ball lands on green and you lose $1 if the ball doesn't land on green\n# 17*(p_green) - 1*(p_not_green)\n# \n# # Compute the standard error of the random variable\n# abs(17-(-1))*sqrt(p_green*p_not_green)\n\n# # Use the `set.seed` function to make sure your answer matches the expected result after random sampling\n# set.seed(1)\n# \n# # Define the number of bets using the variable 'n'\n# n <- 1000\n# \n# \n# # Create a vector called 'X' that contains the outcomes of 1000 samples\n# X <- sample(c(17, -1), n, replace = TRUE, prob = c(p_green, p_not_green))\n#   \n# \n# # Assign the sum of all 1000 outcomes to the variable 'S'\n# S <- sum(X)\n# \n# \n# # Print the value of 'S' to the console\n# S\n# \n# # Calculate the expected outcome of 1,000 spins if you win $17 when the ball lands on green and you lose $1 when the ball doesn't land on green\n# avg <- n*(17*(p_green)+ (-1)*p_not_green)\n# \n# # Compute the standard error of the sum of 1,000 outcomes\n# se <- sqrt(n)*(abs(17-(-1))*sqrt(p_green*p_not_green))\n# \n# # Using the expected value 'avg' and standard error 'se', compute the probability that you win money betting on green 100 times.\n# 1-pnorm(0, avg, se)\n# \n# # Assign a variable `p_green` as the probability of the ball landing in a green pocket\n# p_green <- 2 / 38\n# \n# # Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket\n# p_not_green <- 1-p_green\n# \n# # Define the number of bets using the variable 'n'\n# n <- 100\n# \n# # The variable `B` specifies the number of times we want the simulation to run. Let's run the Monte Carlo simulation 10,000 times.\n# B <- 10000\n# \n# # Use the `set.seed` function to make sure your answer matches the expected result after random sampling.\n# set.seed(1)\n# # Create an object called `S` that replicates the sample code for `B` iterations and sums the outcomes.\n# S <- replicate(B, {\n#   X <- sample(c(17, -1), n, replace = TRUE, prob = c(p_green, p_not_green))\n#   sum(X)\n# })\n# # Compute the average value for 'S'\n# mean(S)\n# \n# # Calculate the standard deviation of 'S'\n# sd(S)\n# \n# # Calculate the proportion of outcomes in the vector `S` that exceed $0\n# mean(S > 0)\n# \n# # Compute the standard error of 'Y', the mean outcome per bet from 10,000 bets.\n# (abs(17-(-1))*sqrt(p_green*p_not_green))/sqrt(n)\n# \n# \n# # The variable `n` specifies the number of independent bets on green\n# n <- 10000\n# \n# # The variable `B` specifies the number of times we want the simulation to run\n# B <- 10000\n# \n# # Use the `set.seed` function to make sure your answer matches the expected result after random number generation\n# set.seed(1)\n# \n# # Generate a vector `S` that contains the the average outcomes of 10,000 bets modeled 10,000 times\n# S <- replicate(B, {\n#   X <- sample(c(17, -1), n, replace = TRUE, prob = c(p_green, p_not_green))\n#   mean(X)\n# })\n# \n# # Compute the average of `S`\n# mean(S)\n# \n# # Compute the standard deviation of `S`\n# sd(S)\n\n\n\n# Assign the number of loans to the variable `n`\nn <- 10000\n\n# Assign the loss per foreclosure to the variable `loss_per_foreclosure`\nloss_per_foreclosure <- -200000\n\n# Assign the probability of default to the variable `p_default`\np_default <- 0.03\n\n# Use the `set.seed` function to make sure your answer matches the expected result after random sampling\nset.seed(1)\n\n# Generate a vector called `defaults` that contains the default outcomes of `n` loans\ndefaults <- sample(c(0,1), n, prob = c(1-p_default, p_default))\n\n# Generate `S`, the total amount of money lost across all foreclosures. Print the value to the console.\nsum(defaults*loss_per_foreclosure)\n\n# Use the `set.seed` function to make sure your answer matches the expected result after random sampling\nset.seed(1)\n\n# The variable `B` specifies the number of times we want the simulation to run\nB <- 10000\n\n# Generate a list of summed losses 'S'. Replicate the code from the previous exercise over 'B' iterations to generate a list of summed losses for 'n' loans\nS <- replicate(B,{\n  X <- sample(c(0,1), n, prob = c(1-p_default, p_default), replace = TRUE)\n  sum(X*loss_per_foreclosure)\n})\n\n\n# Plot a histogram of 'S'\nhist(S)\n\n\n# Calcualte the expected loss due to default out of 10,000 loans\nloss_per_foreclosure *p_default*n\n\n# Compute the standard error of the sum of 10,000 loans\nabs(loss_per_foreclosure)*sqrt(n)*sqrt(n*p_default*(1-p_default))\n\n\n# Assign the loss per foreclosure to the variable `loss_per_foreclosure`\nloss_per_foreclosure <- -200000\n\n# Assign the probability of default to the variable `p_default`\np_default <- 0.03\n\n# Assign a variable `x` as the total amount necessary to have an expected outcome of $0\nx <- -loss_per_foreclosure* p_default/(1-p_default)\n\n\n# Convert `x` to a rate, given that the loan amount is $180,000. Print this value to the console.\nx/180000\n\n\n# Assign the number of loans to the variable `n`\nn <- 10000\n\n# Assign the loss per foreclosure to the variable `loss_per_foreclosure`\nloss_per_foreclosure <- -200000\n\n# Assign the probability of default to the variable `p_default`\np_default <- 0.03\n\n# Generate a variable `z` using the `qnorm` function\nz <- qnorm(0.05)\n\n# Generate a variable `x` using `z`, `p_default`, `loss_per_foreclosure`, and `n`\nx <- -(loss_per_foreclosure)*(n*p_default-z*sqrt(n*p_default*(1-p_default)))/ (n*(1-p_default)+z*sqrt(n*p_default*(1-p_default)))\n\n# Convert `x` to an interest rate, given that the loan amount is $180,000. Print this value to the console.\nx/180000",
    "created" : 1542149364592.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2533155549",
    "id" : "891697ED",
    "lastKnownWriteTime" : 1528406836,
    "last_content_update" : 1528406836,
    "path" : "~/OneDrive/Coding Reference/DataScience_edxHarvardx/section2 continuous prob.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}