{
    "collab_server" : "",
    "contents" : "# Functions for Statical Analyses in R\n#______________________________________\n\n# This serves as a cheat sheet for east access and does not indicate novel code\n# Most examples derive from Harvard Data Science course series on edX (PH125).  \n\n#______________________________________\n# Distibution Functions\n\n\n#On certain variables or paramters its not useful to assign probability to an \n#individual but to break data into intervals\n\n\n#-------------------------------------------\n#example file containing weights of cats, weights\n\n\n#Emprical cumulative distribution function, summary of a list of numeric values, the\n#probability the variable takes a value less than or equal to x\n#F <- function(a) mean(x<=a)\nF <- function(a) mean(weights <=a)\n\n#to get the probabiliy of a cat heavier than 10 lbs.  \n\npr <- 1-F(10)\n\n#prob of a cat between 6 and 9 lbs\n\npr <- F(9) - F(6)\n\n#the cumulative distribution for the normal distribution can be achieved with pnorm for \n#a distribution (a) with an average (avg), and standard deviation (s).\n\n#F(a) = prnorm(q=a, mean=avg, sd=s, lower.tail = T) lower.tail means less than q if true, greater if false\n\n# for example above probability to get a cat heavier than 10 pounds, mean of 9.5, sd of 3\n\npr <- pnorm(10, mean(weights), sd(weights), lower.tail = FALSE)\npr <- pnorm(10, 9.5, 3, lower.tail = F)\n\n\n# Other useful functions for the normal distribution\n\n#rnorm(n, mean = 0, sd = 1) n is number of observations. \n#Generates n random numbers following normal distribution given a mean and standard deviation\nn <- 50\ndist <- rnorm(n, mean=40, sd=4)\nhist(dist)\n\n#dnorm(x, mean = 0, sd = 1, log = FALSE))  x is vector of quantiles\n#Generates Probablity density function or density () \n\npdf <- dnorm(dist, mean=40, sd=4)\nplot(dist, pdf)\n\n#qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) p is a vector of probabilities\n#calculates quantiles, first quantile is 0.25.\n\nquant1 <- qnorm(0.25, mean=40, sd=4)\n#37.3\n\n#pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)\n#as stated gives the cumalitive distribution function or the probility \n#a variable takes a value less than q, the value provided\n#lower.tail = F will give the prob of a value greater than q,\n#it represents the area under the probability density function in the range less than q, zscore\n\n# chance of a value less than 42\n\npnorm(42,mean=40, sd=4)\n#0.69\n\n\n#Monte carlo similuations are possible using rnorm \n#to compare to actual data or to perform simulations\n\n#if 800 values of normally distributed data are choosen at random, \n#what is the distribution of the minimum values?\n#WHat is the chance of minimum less than 28?\n\nB <- 10000\nmin_values <- replicate(B, {\n  simulated_data <- rnorm(800, mean=40, sd=4)\n  min(simulated_data)\n})\nmean(min_values <= 28)\n#0.66\n\n\n#----------------------------------------------------------------\n# The same suite of functions can be used for other distributions\n\n#Beta\tpbeta\tqbeta\tdbeta\trbeta\n#Binomial\tpbinom\tqbinom\tdbinom\trbinom\n#Cauchy\tpcauchy\tqcauchy\tdcauchy\trcauchy\n#Chi-Square\tpchisq\tqchisq\tdchisq\trchisq\n#Exponential\tpexp\tqexp\tdexp\trexp\n#F\tpf\tqf\tdf\trf\n#Gamma\tpgamma\tqgamma\tdgamma\trgamma\n#Geometric\tpgeom\tqgeom\tdgeom\trgeom\n#Hypergeometric\tphyper\tqhyper\tdhyper\trhyper\n#Logistic\tplogis\tqlogis\tdlogis\trlogis\n#Log Normal\tplnorm\tqlnorm\tdlnorm\trlnorm\n#Negative Binomial\tpnbinom\tqnbinom\tdnbinom\trnbinom\n#Normal\tpnorm\tqnorm\tdnorm\trnorm\n#Poisson\tppois\tqpois\tdpois\trpois\n#Student t\tpt\tqt\tdt\trt\n#Studentized Range\tptukey\tqtukey\tdtukey\trtukey\n#Uniform\tpunif\tqunif\tdunif\trunif\n#Weibull\tpweibull\tqweibull\tdweibull\trweibull\n#Wilcoxon Rank Sum Statistic\tpwilcox\tqwilcox\tdwilcox\trwilcox\n#Wilcoxon Signed Rank Statistic\tpsignrank\tqsignrank\tdsignrank\trsignrank\n\n\n\n#Sampling Models\n#Model behavior of random variables\n#__________________________________________\n\n\n#-------------------------------------------\n#Model behavior of a roulette wheel where if the player land son red the casino\n#loses 1 dollar, else they gain a dollar\n\nwheel <- rep(c(\"Black\", \"Red\", \"Green\"), c(18, 18, 2))\n\n#1000 random draws\nn <- 1000\ndraws <- sample(ifelse(wheel==\"Red\", -1, 1), n, replace = T)\nprofit <- sum(draws)\n\n#based upon proportion of colored spaces and equal chance\n#to land on a space, the draws can be derived more simply\ndraws <- sample(c(-1,1), n, replace = T, prob(c(9/19,10/19)))\nprofit <- sum(draws)\n\n#Simulate 10000 times\nn <- 1000\nB <- 10000\navgprofit <- replicate(B, {\n  draws <- sample(c(-1,1), n, replace = T, prob = c(9/19,10/19))\n  sum(draws)\n})\n\n#compare histogram of avgprofit to density function deriveed from the mean and sd alone.\ns <- seq(min(avgprofit), max(avgprofit), length = 100)\nnormal_density <-data.frame(s = s, f= dnorm(s, mean(avgprofit), sd(avgprofit)))\ndata.frame(avgprofit = avgprofit) %>% ggplot(aes(avgprofit, ..density..)) +\n  geom_histogram(color = \"black\", binwidth = 10) +\n  ylab(\"Probability\") +\n  geom_line(data = normal_density, mapping= aes(s,f), color = \"red\")\n\n\n#Central Limit Theorem - a collection of independant random variables \n#their normalized sum  or mean approaches a normal distribution even if the variables \n#are no normally distributed.  allows application of parameters of normal distributions\n\n# two outcomes a and b, probility p\n#mean = ap + b(1-p)  (the number of outcomes cancel out)\n#sd = (based upon distribution of whole population)\n# the sampling distribution of the mean.  the outcome of n draws from the \n#sample repeated several times has\n#mean of means(expected value) = ap + b(1-p) \n#standard error of the mean = standard deviation / sqrt(mean)\n\n#total expected value = n *  (ap + b(1-p))\n#total variance = n * sigma^2\n#total std deviation or standard error of sum \n# = sqrt(n) * sigma = sqrt(n) * |b-a| sqrt(p(1-p)))\n#for n= 1, standard error = |b-a| sqrt(p(1-p)))\n\n#example:\n#from above roulette example\n# a casino wins (+1), black or green, p(a) = 20/38 = 10/19\n# b casino loses(-1), red, p(b) = 18/38 = 1 - p(a) = 9/19\n\n#Expected value of E is \n#(20 + 18)/38 = $0.05\n#ap + b(1-p) \nE <- 1*(10/19)+(-1)*(9/19)\n#0.052\n\n#Standard error\n#abs(b-a)* sqrt(p(1-p))\nabs(1-(-1))*sqrt(9/19*10/19)\n# 0.998614,  close to 1\n\n#for 1000 draws, expected value\nsum_draws <-  1000 * (1*(10/19)+(-1)*(9/19))\n# $52.63\ndraw_error = sqrt(1000) * abs(1-(-1))*sqrt(9/19*10/19)\n# $31.57\n\n#Chance of losing money, ie value <0\npnorm(0, sum_draws, draw_error)\n# 0.0478 or 4.7% chance of losing money\n\n#-------------------------------------------\n# Example using mortage foreclosure rates\n\n#number of laons\nn <- 1000\nloss_per\n\n\n",
    "created" : 1542582188939.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3465514121",
    "id" : "66447CA4",
    "lastKnownWriteTime" : 1542609598,
    "last_content_update" : 1542609598170,
    "path" : "~/OneDrive/Coding Reference/Coding_Examples/DistributionFunctions.R",
    "project_path" : "DistributionFunctions.R",
    "properties" : {
        "tempName" : "Untitled3"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}