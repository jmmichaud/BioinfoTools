{
    "collab_server" : "",
    "contents" : "# # This line of sample code simulates four random games where the Celtics either lose or win. Each game is independent of other games.\n# simulated_games <- sample(c(\"lose\",\"win\"), 4, replace = TRUE, prob = c(0.6, 0.4))\n# \n# # The variable 'B' specifies the number of times we want the simulation to run. Let's run the Monte Carlo simulation 10,000 times.\n# B <- 10000\n# \n# # Use the `set.seed` function to make sure your answer matches the expected result after random sampling.\n# set.seed(1)\n# \n# # Create an object called `celtic_wins` that first replicates the sample code generating the variable called `simulated_games` for `B` iterations and then tallies the number of simulated series that contain at least one win for the Celtics.\n# celtic_wins <- replicate(B, {\n#   simulated_games <- sample(c(\"lose\",\"win\"), 4, replace = TRUE, prob = c(0.6, 0.4))\n#   any(simulated_games==\"win\")\n#   })\n# \n# \n# print(mean(celtic_wins == \"TRUE\"))\n\n# # Assign a variable 'n' as the number of remaining games.\n# n <- 6\n# \n# # Assign a variable 'l' to a list of possible game outcomes, where 0 indicates a loss and 1 indicates a win for the Cavs.\n# l <- list(c(1, 0))\n# \n# # \n# # # # Create a data frame named 'possibilities' that contains all possible outcomes for the remaining games.\n# possibilities <- expand.grid(rep(l, n))\n# results <- rowSums(possibilities) >= 4\n# probofwinning <- mean(results)\n\n\n\n## another way to do it, but is not what grader was looking fore\n# library(gtools)\n# gameperms <-permutations(2, 6, v=l , repeats.allowed = TRUE)\n# sums <- apply(gameperms, 1, sum)\n# probofwin <- sum((sums >=4))/nrow(gameperms)\n# print(probofwin)\n\n\n# # The variable `B` specifies the number of times we want the simulation to run. Let's run the Monte Carlo simulation 10,000 times.\n# B <- 10000\n# \n# # Use the `set.seed` function to make sure your answer matches the expected result after random sampling.\n# set.seed(1)\n# \n# # Create an object called `results` that replicates the sample code for `B` iterations and tallies the number of simulated series that contain at least four wins for the Cavs.\n# results <- replicate(B {\n#   x <- sample(c(1,0), 6, replace = TRUE)\n#   sum(x)>=4\n# })\n#   \n# # Calculate the frequency out of `B` iterations that the Cavs won at least four games in the remainder of the series. Print your answer to the console.\n# mean(results)\n\n\n\n\n\n\n\n# \n# # Given a value 'p', the probability of winning the series for the underdog team B can be computed with the following function based on a Monte Carlo simulation:\n# prob_win <- function(N, p=0.75){\n#   B <- 10000\n#   result <- replicate(B, {\n#     b_win <- sample(c(1,0), N, replace = TRUE, prob = c(1-p, p))\n#     sum(b_win)>=(N+1)/2\n#   })\n#   mean(result)\n# }\n# \n# # Assign the variable 'N' as the vector of series lengths. Use only odd numbers ranging from 1 to 25 games.\n# N <- seq(1,25,2)\n#   \n# # Apply the 'prob_win' function across the vector of series lengths to determine the probability that team B will win. Call this object `Pr`.\n# Pr <- sapply(N, prob_win)  \n#   \n# # Plot the number of games in the series 'N' on the x-axis and 'Pr' on the y-axis.\n# plot(N, Pr)\n",
    "created" : 1542157817764.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "169388022",
    "id" : "1A0C5C0F",
    "lastKnownWriteTime" : 1525044279,
    "last_content_update" : 1525044279,
    "path" : "~/OneDrive/Coding Reference/DataScience_edxHarvardx/section1 discrete prob.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}