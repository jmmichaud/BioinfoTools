{
    "collab_server" : "",
    "contents" : "# Functions for Statical Analyses in R\n#______________________________________\n\n# Most examples derive from Harvard Data Science course series on edX (PH125).  \n# This serves as a cheat sheet for east access and does not indicate novel code.\n\n#packages\nlibrary(gtools)\n\n\n# Discrete Probability\n#______________________________________\n\n#Permutions \n#(number of ways r items can be arranged with or without replacement from n items \n#when order matters, v is a vector of items to sample from, \n#if v is not provided the default will be a vector of N integers, 1 - N)\n\n#permutations(n=3,r=2,v=x,repeats.allowed=F) in gtools\n\n#example:  Calculate the number of ways 21 (blackjack) can be made from a deck of cards, \n#deck is vector of all the different cards in the deck\ndeck <- c('AH', '2H', '3H', '4H', '5H', '6H', '7H', '8H', '9H', '10H', 'JH', 'QH', 'KH','AD', '2D', '3D', '4D', '5D', '6D', '7D', '8D', '9D', '10D', 'JD', 'QD', 'KD','AS', '2S', '3S', '4S', '5S', '6S', '7S', '8S', '9S', '10S', 'JS', 'QS', 'KS','AC', '2C', '3C', '4C', '5C', '6C', '7C', '8C', '9C', '10C', 'JC', 'QC', 'KC')\naces <- c('AH','AD','AS','AC')\ntens  <- c('10H','10D','10S','10C','JH','JD','JS','JC','QH','QD','QS','QC','KH','KD','KS','KC')\n\nhandsP <- permutations(52, 2, v = deck, repeats.allowed=F) #all different ways 2 cards can be combined\nfirstcard <- handsP[,1] #all the first cards\nsecondcard <- handsP[,2] #all the second cards\nsum(firstcard %in% aces) #number of cases where first card is an ace\nsum(firstcard %in% aces)/nrow(hands) #proportion of cases where first card is an ace\nmean(firstcard %in% aces) #gives same portion of cases where first card is an ace\nmean(firstcard %in% tens & secondcard %in% aces)#proportion of cases where first card is an facecard and second card is an ace\n\n#the probability that the first and second cards will either be a facecard or an ace ie all cases of 21\nblackjackchanceP <- mean(firstcard %in% tens & secondcard %in% aces) + mean(firstcard %in% aces & secondcard %in% tens)\nblackjackchanceP\n\n#Combinations\n#(number of ways r items can be arranged with or without replacement from n items \n#when order doesn't matter, v is a vector of items to sample from, \n#if v is not provided the default will be a vector of N integers, 1 - N)\n\n#combinations(n=3,r=2,v=x,repeats.allowed=F) in gtools\n\n#example calculate chance of blackjack\nhandsC <- combinations(52,2 ,v = deck, repeats.allowed=F)\n\nblackjackchanceC <- mean(handsC[,1] %in% tens & handsC[,2] %in% aces) + mean(handsC[,1] %in% aces & handsC[,2] %in% tens)\nblackjackchanceC\n\n#regardless of approach of using permutations or combinations the same answer of 0.0482 (4.8%) probability.\n\n\n\n#Monte Carlo for simple prediction \n\n#predict if one or more people in a group of n people share the same birthday\n\n#this would assume that birhdays are equal and any date is as equally likely.  takes 200 random samples from a vector 1-365\n#repeated 10000 times\n\nB <- 10000 #number of times for monte carlo to sample\nn <- 20 #number of people\nresults <- replicate(B,{ \n  bdays <- sample(1:365, n, replace = TRUE) \n  any(duplicated(bdays))\n  })\n\nmean(results)\n\n#at 200 people its just about 100% sure that there will be a duplicated birhtday. at 20 people the probabilty drops to 40%.\n\n\n#at how many people does the probability greater than 0.5\n\n\n\nprob_calc <- function(n, B=10000) {\n  same_bdays <-replicate(B, {\n    bdays <- sample(1:365, n, replace = TRUE) \n    any(duplicated(bdays))\n  })\n  mean(same_bdays)\n}\n\nn <- seq(1,60)\n\nprobs <- sapply(n, prob_calc)\nplot(n, probs)\n\n# the plot shows that a value of 22 people results in greater than 50% chance of duplicated birthday\n\n# Calculate the exact prob an individual has a unique bday\n# each person added in the group adds a prob 1 x 364/365 x 363/365â€¦(365-n+1)/365\n\nexact_prob <- function(n) {\n  unique_prob <- seq(365, 365-n+1)/365\n  1-prod(unique_prob)\n}\n\n\nuprob <- sapply(n, exact_prob)\n\nlines(n, uprob, col = 'green')  #requires previous plot: probs v n\n\n\n#Look at stability of monte carlo, ie at what values of B are values reliable\n\nprob_calcB <- function(B, n = 22) {\n  same_bdays <-replicate(B, {\n    bdays <- sample(1:365, n, replace = TRUE) \n    any(duplicated(bdays))\n  })\n  mean(same_bdays)\n}\n\nB <- 10^seq(1,5, len = 100)\n\nprobB <- sapply(B, prob_calcB)\nplot(log10(B), probB, type = 'l')\n\n# between B = 1000 to 10000 probability measurement stabalized to 0.5 (the expected value for n=22)\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1542149171774.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2330407218",
    "id" : "A42B7A35",
    "lastKnownWriteTime" : 1542162485,
    "last_content_update" : 1542162485783,
    "path" : "~/OneDrive/Coding Reference/Coding_Examples/DiscreteProbability.R",
    "project_path" : "DiscreteProbability.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}