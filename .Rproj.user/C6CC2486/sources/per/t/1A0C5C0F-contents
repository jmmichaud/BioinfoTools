# # This line of sample code simulates four random games where the Celtics either lose or win. Each game is independent of other games.
# simulated_games <- sample(c("lose","win"), 4, replace = TRUE, prob = c(0.6, 0.4))
# 
# # The variable 'B' specifies the number of times we want the simulation to run. Let's run the Monte Carlo simulation 10,000 times.
# B <- 10000
# 
# # Use the `set.seed` function to make sure your answer matches the expected result after random sampling.
# set.seed(1)
# 
# # Create an object called `celtic_wins` that first replicates the sample code generating the variable called `simulated_games` for `B` iterations and then tallies the number of simulated series that contain at least one win for the Celtics.
# celtic_wins <- replicate(B, {
#   simulated_games <- sample(c("lose","win"), 4, replace = TRUE, prob = c(0.6, 0.4))
#   any(simulated_games=="win")
#   })
# 
# 
# print(mean(celtic_wins == "TRUE"))

# # Assign a variable 'n' as the number of remaining games.
# n <- 6
# 
# # Assign a variable 'l' to a list of possible game outcomes, where 0 indicates a loss and 1 indicates a win for the Cavs.
# l <- list(c(1, 0))
# 
# # 
# # # # Create a data frame named 'possibilities' that contains all possible outcomes for the remaining games.
# possibilities <- expand.grid(rep(l, n))
# results <- rowSums(possibilities) >= 4
# probofwinning <- mean(results)



## another way to do it, but is not what grader was looking fore
# library(gtools)
# gameperms <-permutations(2, 6, v=l , repeats.allowed = TRUE)
# sums <- apply(gameperms, 1, sum)
# probofwin <- sum((sums >=4))/nrow(gameperms)
# print(probofwin)


# # The variable `B` specifies the number of times we want the simulation to run. Let's run the Monte Carlo simulation 10,000 times.
# B <- 10000
# 
# # Use the `set.seed` function to make sure your answer matches the expected result after random sampling.
# set.seed(1)
# 
# # Create an object called `results` that replicates the sample code for `B` iterations and tallies the number of simulated series that contain at least four wins for the Cavs.
# results <- replicate(B {
#   x <- sample(c(1,0), 6, replace = TRUE)
#   sum(x)>=4
# })
#   
# # Calculate the frequency out of `B` iterations that the Cavs won at least four games in the remainder of the series. Print your answer to the console.
# mean(results)







# 
# # Given a value 'p', the probability of winning the series for the underdog team B can be computed with the following function based on a Monte Carlo simulation:
# prob_win <- function(N, p=0.75){
#   B <- 10000
#   result <- replicate(B, {
#     b_win <- sample(c(1,0), N, replace = TRUE, prob = c(1-p, p))
#     sum(b_win)>=(N+1)/2
#   })
#   mean(result)
# }
# 
# # Assign the variable 'N' as the vector of series lengths. Use only odd numbers ranging from 1 to 25 games.
# N <- seq(1,25,2)
#   
# # Apply the 'prob_win' function across the vector of series lengths to determine the probability that team B will win. Call this object `Pr`.
# Pr <- sapply(N, prob_win)  
#   
# # Plot the number of games in the series 'N' on the x-axis and 'Pr' on the y-axis.
# plot(N, Pr)
