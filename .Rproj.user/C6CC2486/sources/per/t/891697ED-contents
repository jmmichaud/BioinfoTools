# # Assign a variable 'female_avg' as the average female height.
# female_avg <- 64
# 
# # Assign a variable 'female_sd' as the standard deviation for female heights.
# female_sd <- 3
# 
# # Using variables 'female_avg' and 'female_sd', calculate the probability that a randomly selected female is shorter than 5 feet. Print this value to the console.
# pnorm(60,female_avg, female_sd)

# # Using variables 'female_avg' and 'female_sd', calculate the probability that a randomly selected female is 6 feet or taller. Print this value to the console.
# 1 - pnorm(72,female_avg, female_sd)
# 
# # Using variables 'female_avg' and 'female_sd', calculate the probability that a randomly selected female is between the desired height range. Print this value to the console.
# pnorm(67,female_avg, female_sd) - pnorm(61,female_avg, female_sd)
# 
# # To a variable named 'taller', assign the value of a height that is one SD taller than average.
# taller <- female_avg + female_sd
# 
# 
# # To a variable named 'shorter', assign the value of a height that is one SD shorter than average.
# shorter <- female_avg - female_sd
# 
# # Calculate the probability that a randomly selected female is between the desired height range. Print this value to the console.
# pnorm(taller,female_avg, female_sd) - pnorm(shorter,female_avg, female_sd)


# Assign a variable 'female_avg' as the average female height.
# male_avg <- 69
# 
# # Assign a variable 'female_sd' as the standard deviation for female heights.
# male_sd <- 3
# 
# # Determine the height of a man in the 99th percentile of the distribution.
# qnorm(.99, male_avg, male_sd)

# # The variable `B` specifies the number of times we want the simulation to run.
# B <- 1000
# 
# # Use the `set.seed` function to make sure your answer matches the expected result after random number generation.
# set.seed(1)
# 
# # Create an object called `highestIQ` that contains the highest IQ score from each random distribution of 10,000 people.
# highestIQ <- replicate(B, {
#   simulated_data <- rnorm(10000, 100, 15)
#   max(simulated_data)
# })
# 
# 
# # Make a histogram of the highest IQ scores.
# hist(highestIQ)


# # The variables 'green', 'black', and 'red' contain the number of pockets for each color
# green <- 2
# black <- 18
# red <- 18
# 
# # Assign a variable `p_green` as the probability of the ball landing in a green pocket
# p_green <- green / (green+black+red)
# 
# # Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket
# p_not_green <- 1 - p_green


# #Create a model to predict the random variable `X`, your winnings from betting on green.
# X <- sample(c(17, -1), 1000, replace = TRUE, prob = c(p_green, p_not_green))
# 
# 
# # Print the value of `X` to the console
# X
# 
# # Calculate the expected outcome if you win $17 if the ball lands on green and you lose $1 if the ball doesn't land on green
# 17*(p_green) - 1*(p_not_green)
# 
# # Compute the standard error of the random variable
# abs(17-(-1))*sqrt(p_green*p_not_green)

# # Use the `set.seed` function to make sure your answer matches the expected result after random sampling
# set.seed(1)
# 
# # Define the number of bets using the variable 'n'
# n <- 1000
# 
# 
# # Create a vector called 'X' that contains the outcomes of 1000 samples
# X <- sample(c(17, -1), n, replace = TRUE, prob = c(p_green, p_not_green))
#   
# 
# # Assign the sum of all 1000 outcomes to the variable 'S'
# S <- sum(X)
# 
# 
# # Print the value of 'S' to the console
# S
# 
# # Calculate the expected outcome of 1,000 spins if you win $17 when the ball lands on green and you lose $1 when the ball doesn't land on green
# avg <- n*(17*(p_green)+ (-1)*p_not_green)
# 
# # Compute the standard error of the sum of 1,000 outcomes
# se <- sqrt(n)*(abs(17-(-1))*sqrt(p_green*p_not_green))
# 
# # Using the expected value 'avg' and standard error 'se', compute the probability that you win money betting on green 100 times.
# 1-pnorm(0, avg, se)
# 
# # Assign a variable `p_green` as the probability of the ball landing in a green pocket
# p_green <- 2 / 38
# 
# # Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket
# p_not_green <- 1-p_green
# 
# # Define the number of bets using the variable 'n'
# n <- 100
# 
# # The variable `B` specifies the number of times we want the simulation to run. Let's run the Monte Carlo simulation 10,000 times.
# B <- 10000
# 
# # Use the `set.seed` function to make sure your answer matches the expected result after random sampling.
# set.seed(1)
# # Create an object called `S` that replicates the sample code for `B` iterations and sums the outcomes.
# S <- replicate(B, {
#   X <- sample(c(17, -1), n, replace = TRUE, prob = c(p_green, p_not_green))
#   sum(X)
# })
# # Compute the average value for 'S'
# mean(S)
# 
# # Calculate the standard deviation of 'S'
# sd(S)
# 
# # Calculate the proportion of outcomes in the vector `S` that exceed $0
# mean(S > 0)
# 
# # Compute the standard error of 'Y', the mean outcome per bet from 10,000 bets.
# (abs(17-(-1))*sqrt(p_green*p_not_green))/sqrt(n)
# 
# 
# # The variable `n` specifies the number of independent bets on green
# n <- 10000
# 
# # The variable `B` specifies the number of times we want the simulation to run
# B <- 10000
# 
# # Use the `set.seed` function to make sure your answer matches the expected result after random number generation
# set.seed(1)
# 
# # Generate a vector `S` that contains the the average outcomes of 10,000 bets modeled 10,000 times
# S <- replicate(B, {
#   X <- sample(c(17, -1), n, replace = TRUE, prob = c(p_green, p_not_green))
#   mean(X)
# })
# 
# # Compute the average of `S`
# mean(S)
# 
# # Compute the standard deviation of `S`
# sd(S)



# Assign the number of loans to the variable `n`
n <- 10000

# Assign the loss per foreclosure to the variable `loss_per_foreclosure`
loss_per_foreclosure <- -200000

# Assign the probability of default to the variable `p_default`
p_default <- 0.03

# Use the `set.seed` function to make sure your answer matches the expected result after random sampling
set.seed(1)

# Generate a vector called `defaults` that contains the default outcomes of `n` loans
defaults <- sample(c(0,1), n, prob = c(1-p_default, p_default))

# Generate `S`, the total amount of money lost across all foreclosures. Print the value to the console.
sum(defaults*loss_per_foreclosure)

# Use the `set.seed` function to make sure your answer matches the expected result after random sampling
set.seed(1)

# The variable `B` specifies the number of times we want the simulation to run
B <- 10000

# Generate a list of summed losses 'S'. Replicate the code from the previous exercise over 'B' iterations to generate a list of summed losses for 'n' loans
S <- replicate(B,{
  X <- sample(c(0,1), n, prob = c(1-p_default, p_default), replace = TRUE)
  sum(X*loss_per_foreclosure)
})


# Plot a histogram of 'S'
hist(S)


# Calcualte the expected loss due to default out of 10,000 loans
loss_per_foreclosure *p_default*n

# Compute the standard error of the sum of 10,000 loans
abs(loss_per_foreclosure)*sqrt(n)*sqrt(n*p_default*(1-p_default))


# Assign the loss per foreclosure to the variable `loss_per_foreclosure`
loss_per_foreclosure <- -200000

# Assign the probability of default to the variable `p_default`
p_default <- 0.03

# Assign a variable `x` as the total amount necessary to have an expected outcome of $0
x <- -loss_per_foreclosure* p_default/(1-p_default)


# Convert `x` to a rate, given that the loan amount is $180,000. Print this value to the console.
x/180000


# Assign the number of loans to the variable `n`
n <- 10000

# Assign the loss per foreclosure to the variable `loss_per_foreclosure`
loss_per_foreclosure <- -200000

# Assign the probability of default to the variable `p_default`
p_default <- 0.03

# Generate a variable `z` using the `qnorm` function
z <- qnorm(0.05)

# Generate a variable `x` using `z`, `p_default`, `loss_per_foreclosure`, and `n`
x <- -(loss_per_foreclosure)*(n*p_default-z*sqrt(n*p_default*(1-p_default)))/ (n*(1-p_default)+z*sqrt(n*p_default*(1-p_default)))

# Convert `x` to an interest rate, given that the loan amount is $180,000. Print this value to the console.
x/180000