tens  <- c('10H','10D','10S','10C','JH','JD','JS','JC','QH','QD','QS','QC','KH','KD','KS','KC')
hands <- permutations(52, 2, v = deck) #all different ways 2 cards can be combined
firstcard <- hands[,1] #all the first cards
secondcard <- hands[,2] #all the second cards
sum(firstcard %in% aces) #number of cases where first card is an ace
sum(firstcard %in% aces)/sum(firstcard)
sum(firstcard %in% aces)/nrow(firstcard) #number of cases where first card is an ace
sum(firstcard %in% aces)/nrow(hands)
deck <- c('AH', '2H', '3H', '4H', '5H', '6H', '7H', '8H', '9H', '10H', 'JH', 'QH', 'KH','AD', '2D', '3D', '4D', '5D', '6D', '7D', '8D', '9D', '10D', 'JD', 'QD', 'KD','AS', '2S', '3S', '4S', '5S', '6S', '7S', '8S', '9S', '10S', 'JS', 'QS', 'KS','AC', '2C', '3C', '4C', '5C', '6C', '7C', '8C', '9C', '10C', 'JC', 'QC', 'KC')
aces <- c('AH','AD','AS','AC')
tens  <- c('10H','10D','10S','10C','JH','JD','JS','JC','QH','QD','QS','QC','KH','KD','KS','KC')
hands <- permutations(52, 2, v = deck, repeats.allowed=F) #all different ways 2 cards can be combined
firstcard <- hands[,1] #all the first cards
secondcard <- hands[,2] #all the second cards
sum(firstcard %in% aces) #number of cases where first card is an ace
sum(firstcard %in% aces)/nrow(hands)
hands
nrow(hands)
204/2652
blackjackchance <- (sum(firstcard %in% tens & secondcard %in% aces) + sum(firstcard %in% aces & secondcard %in% ten))/nrow(hands)
blackjackchance
blackjackchance <- (sum(firstcard %in% tens & secondcard %in% aces) + sum(firstcard %in% aces & secondcard %in% tens))/nrow(hands)
blackjackchance <- (sum(firstcard %in% tens & secondcard %in% aces) + sum(firstcard %in% aces & secondcard %in% tens))/nrow(hands)
blackjackchance
hands <- combinations(52,2 ,v = deck)
hands
hands <- combinations(52,2 ,v = deck, repeats.allowed=F)
hands
mean(hands[,1] %in% aces & hands[,2] %in% facecard)
mean(hands[,1] %in% aces & hands[,2] %in% tens)
sum(firstcard %in% aces)/nrow(hands) #proportion of cases where first card is an ace
mean(firstcard %in% aces)
deck <- c('AH', '2H', '3H', '4H', '5H', '6H', '7H', '8H', '9H', '10H', 'JH', 'QH', 'KH','AD', '2D', '3D', '4D', '5D', '6D', '7D', '8D', '9D', '10D', 'JD', 'QD', 'KD','AS', '2S', '3S', '4S', '5S', '6S', '7S', '8S', '9S', '10S', 'JS', 'QS', 'KS','AC', '2C', '3C', '4C', '5C', '6C', '7C', '8C', '9C', '10C', 'JC', 'QC', 'KC')
aces <- c('AH','AD','AS','AC')
tens  <- c('10H','10D','10S','10C','JH','JD','JS','JC','QH','QD','QS','QC','KH','KD','KS','KC')
hands <- permutations(52, 2, v = deck, repeats.allowed=F) #all different ways 2 cards can be combined
firstcard <- hands[,1] #all the first cards
secondcard <- hands[,2] #all the second cards
sum(firstcard %in% aces) #number of cases where first card is an ace
sum(firstcard %in% aces)/nrow(hands) #proportion of cases where first card is an ace
mean(firstcard %in% aces)
sum(firstcard %in% tens & secondcard %in% aces)/nrow(hands)#
deck <- c('AH', '2H', '3H', '4H', '5H', '6H', '7H', '8H', '9H', '10H', 'JH', 'QH', 'KH','AD', '2D', '3D', '4D', '5D', '6D', '7D', '8D', '9D', '10D', 'JD', 'QD', 'KD','AS', '2S', '3S', '4S', '5S', '6S', '7S', '8S', '9S', '10S', 'JS', 'QS', 'KS','AC', '2C', '3C', '4C', '5C', '6C', '7C', '8C', '9C', '10C', 'JC', 'QC', 'KC')
aces <- c('AH','AD','AS','AC')
tens  <- c('10H','10D','10S','10C','JH','JD','JS','JC','QH','QD','QS','QC','KH','KD','KS','KC')
hands <- permutations(52, 2, v = deck, repeats.allowed=F) #all different ways 2 cards can be combined
firstcard <- hands[,1] #all the first cards
secondcard <- hands[,2] #all the second cards
sum(firstcard %in% aces) #number of cases where first card is an ace
sum(firstcard %in% aces)/nrow(hands) #proportion of cases where first card is an ace
mean(firstcard %in% aces) #gives same portion of cases where first card is an ace
mean(firstcard %in% tens & secondcard %in% aces)#proportion of cases where first card is an facecard and second card is an ace
#the probability that the first and second cards will either be a facecard or an ace ie all cases of 21
blackjackchance <- (sum(firstcard %in% tens & secondcard %in% aces) + sum(firstcard %in% aces & secondcard %in% tens))/nrow(hands)
blackjackchance
blackjackchance <- mean(firstcard %in% tens & secondcard %in% aces) + mean(firstcard %in% aces & secondcard %in% tens)
blackjackchance
handsC <- combinations(52,2 ,v = deck, repeats.allowed=F)
blackjackchanceC <- mean(handsC[,1] %in% tens & handsC[,2] %in% aces) + mean(handsC[,1] %in% aces & handsC[,2] %in% tens)
blackjackchanceC
sapply
B <- 10000 #number of times for monte carlo to sample
Results <- replicate(B,{
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
B <- 10000 #number of times for monte carlo to sample
n <- seq(1,60)
Results <- replicate(B,{
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
mean(Results)
Results
B <- 10000 #number of times for monte carlo to sample
n <- 2
Results <- replicate(B,{
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
B <- 10000 #number of times for monte carlo to sample
n <- 200 #number of people
results <- replicate(B,{
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
mean(results)
results
n <- 20 #number of people
B <- 10000 #number of times for monte carlo to sample
n <- 20 #number of people
results <- replicate(B,{
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
mean(results)
compute_prob <- function(n, B= 10000 {
same_day <- replicate(B,{
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
})
n <- seq(1,60)
prob <- sapply(n, compute_prob)
plot(n, prob)
compute_prob <- function(n, B= 10000 {
same_bdays <- replicate(B,{
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
})
n <- seq(1,60)
prob <- sapply(n, compute_prob)
plot(n, prob)
probs <- sapply(n, compute_prob)
plot(n, probs)
prob_calc <- function(n, B=10000) {
same_bdays <-replicate(B, {
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
return(same_bdays)
}
n <- seq(1,60)
probs <- sapply(n, compute_prob)
plot(n, probs)
prob_calc <- function(n, B=10000) {
same_bdays <-replicate(B, {
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
return(same_bdays)
}
n <- seq(1,60)
probs <- sapply(n, prob_calc)
plot(n, probs)
probs
prob_calc <- function(n, B=10000 {
same_bdays <-replicate(B, {
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
})
n <- seq(1,60)
probs <- sapply(n, prob_calc)
plot(n, probs)
probs
prob_calc <- function(n, B=10000) {
same_bdays <-replicate(B, {
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
return(same_bdays)
}
n <- seq(1,60)
probs <- sapply(n, prob_calc)
plot(n, probs)
probs
prob_calc <- function(n, B=10000) {
same_bdays <-replicate(B, {
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
}
n <- seq(1,60)
probs <- sapply(n, prob_calc)
probs
plot(n, probs)
prob_calc <- function(n, B=10000) {
same_bdays <-replicate(B, {
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
mean(same_bdays)
}
n <- seq(1,60)
probs <- sapply(n, prob_calc)
plot(n, probs)
prob_calc <- function(B, n = 22) {
same_bdays <-replicate(B, {
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
mean(same_bdays)
}
B <- 10^seq(1,5, len = 100)
probs <- sapply(B, prob_calc)
plot(log10(B), probs, type = l)
plot(log10(B), probs, type = 'l')
exact_prob <- function(n) {
unique_prob <- seq(365, 365-n+1)/365
1-prod(prob_unique)
}
uprob <- sapply(n, exact_prob)
plot(n, probs)
lines(n, uprob, col = 'green')
exact_prob <- function(n) {
unique_prob <- seq(365, 365-n+1)/365
1-prod(unique_prob)
}
uprob <- sapply(n, exact_prob)
plot(n, probs)
lines(n, uprob, col = 'green')
exact_prob <- function(n) {
unique_prob <- seq(365, 365-n+1)/365
1-prod(unique_prob)
}
n <- seq(1,60)
uprob <- sapply(n, exact_prob)
plot(n, probs)
lines(n, uprob, col = 'green')
uprob
prob_calc <- function(n, B=10000) {
same_bdays <-replicate(B, {
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
})
mean(same_bdays)
}
n <- seq(1,60)
probs <- sapply(n, prob_calc)
plot(n, probs)
exact_prob <- function(n) {
unique_prob <- seq(365, 365-n+1)/365
1-prod(unique_prob)
}
uprob <- sapply(n, exact_prob)
lines(n, uprob, col = 'green')
library(tidyverse) #includes dplyr, tidyr, ggplot2
library(dslabs) #contains data files
# Continuous Probability
#______________________________________
#On certain variables or paramters its not useful to assign probability to an
#individual but to break data into intervals
data(heights)
data(heights)
data(hieghts)
library(tidyverse)
?F
pr <- 1-F(70)
F <- function(a) mean(x<=a)
pr <- 1-F(70)
?pnorm
pr <- pnorm(10, 9.5, 3, lower.tail = F)
pr
r <- c(2,3,5,9,12,19,23,25,29,30,31,32,45)
qnorm(0.25, mean(r), sd(r), lower.tail = T)
dist <- rnorm(50, mean  = 32, sd = 4)
n <- 50
dist <- rnorm(n, mean  = 32, sd = 4)
plot(n, dist)
dist
n <- 50
dist <- rnorm(n, mean  = 32, sd = 4)
plot(n, dist, type = 'l')
dist <- rnorm(n, mean(n), sd(n))
n
#Generates a normal distribution of n items
n <- seq(1, 25, by=0.5)
n
dist <- rnorm(n, mean(n), sd(n))
dist <- rnorm(n, mean(n), sd(n))
plot(n, dist, type = 'l')
n <- seq(1, 25, by=0.5)
dist <- rnorm(49, mean(n), sd(n))
plot(n, dist, type = 'l')
n <- 50
dist <- rnorm(n, mean=40, sd=4)
plot(n-1, dist, type = 'l')
n <- 50
dist <- rnorm(n, mean=40, sd=4)
hist(dist)
pdf <- dnorm(dist,mean=40, sd=4)
pdf
pdf <- dnorm(dist,mean=40, sd=4)
plot(n, pdf, type = "l")
n
length(pdf)
plot(n, pdf)
pdf <- dnorm(dist, mean=40, sd=4)
plot(dist, pdf, type = "l")
n <- 50
dist <- rnorm(n, mean=40, sd=4)
hist(dist)
#dnorm(x, mean = 0, sd = 1, log = FALSE))  x is vector of quantiles
#Generates Probablity density function or density ()
pdf <- dnorm(dist, mean=40, sd=4)
plot(dist, pdf)
pdf <- dnorm(dist, mean=40, sd=4)
plot(dist, pdf, type = 'l')
n <- 50
dist <- rnorm(n, mean=40, sd=4)
hist(dist)
#dnorm(x, mean = 0, sd = 1, log = FALSE))  x is vector of quantiles
#Generates Probablity density function or density ()
pdf <- dnorm(dist, mean=40, sd=4)
plot(dist, pdf, type = 'l')
plot(dist, pdf, type = "l")
n <- 50
dist <- rnorm(n, mean=40, sd=4)
hist(dist)
#dnorm(x, mean = 0, sd = 1, log = FALSE))  x is vector of quantiles
#Generates Probablity density function or density ()
pdf <- dnorm(dist, mean=40, sd=4)
plot(dist, pdf, type = "l")
plot(dist, pdf)
quant1 <- qnorm(0.25, mean=40, sd=4)
quant1
prnorm(10,mean=40, sd=4)
pnorm(10,mean=40, sd=4)
pnorm(42,mean=40, sd=4)
?min
B <- 10000
min_values <- replicate(B, {
simulated_data <- rnorm(800, mean=40, sd=4))
min(simulated_data)
})
mean(min_values <= 42)
B <- 10000
min_values <- replicate(B, {
simulated_data <- rnorm(800, mean=40, sd=4))
min(simulated_data)
}
mean(min_values <= 42)
B <- 10000
min_values <- replicate(B, {
simulated_data <- rnorm(800, mean=40, sd=4))
min(simulated_data)
})
me
B <- 10000
min_values <- replicate(B, {
simulated_data <- rnorm(800, mean=40, sd=4))
min(simulated_data)
})
B <- 10000
min_values <- replicate(B, {
simulated_data <- rnorm(800, mean=40, sd=4))
min(simulated_data)
})
B <- 10000
min_values <- replicate(B, {
simulated_data <- rnorm(800, mean=40, sd=4)
min(simulated_data)
})
mean(min_values <= 42)
B <- 10000
min_values <- replicate(B, {
simulated_data <- rnorm(800, mean=40, sd=4)
min(simulated_data)
})
mean(min_values <= 30)
B <- 10000
min_values <- replicate(B, {
simulated_data <- rnorm(800, mean=40, sd=4)
min(simulated_data)
})
mean(min_values <= 20)
B <- 10000
min_values <- replicate(B, {
simulated_data <- rnorm(800, mean=40, sd=4)
min(simulated_data)
})
mean(min_values <= 25)
B <- 10000
min_values <- replicate(B, {
simulated_data <- rnorm(800, mean=40, sd=4)
min(simulated_data)
})
mean(min_values <= 28)
wheel <- rep(c("Black", "Red", "Green"), c(18, 18, 2))
#1000 random draws
n <- 1000
draws <- sample(ifelse(color=="Red", -1, 1), n, replace = T)
draws[1:10]
wheel <- rep(c("Black", "Red", "Green"), c(18, 18, 2))
#1000 random draws
n <- 1000
draws <- sample(ifelse(wheel=="Red", -1, 1), n, replace = T)
draws[1:10]
library(ggplot2)
n <- 1000
B <- 10000
avgprofit <- replicate(B, {
draws <- sample(c(-1,1), n, replace = T, prob(c(9/19,10/19)))
sum(draws)
})
s <- seq(min(avgprofit), max(avgprofit), length = 100)
normal_density <-data.frame(s = s, f= dnorm(s, mean(avgprofit), sd(avgprofit)))
data.frame(avgprofit = avgprofit) %>% ggplot(aes(avgprofit, ..density)) +
geom_histogram(color = "black", binwidth = 10) +
ylab("Probability") +
geom_line(data = normal_density, mapping= aes(s,f), color = "red")
n <- 1000
B <- 10000
avgprofit <- replicate(B, {
draws <- sample(c(-1,1), n, replace = T, prob = c(9/19,10/19))
sum(draws)
})
s <- seq(min(avgprofit), max(avgprofit), length = 100)
normal_density <-data.frame(s = s, f= dnorm(s, mean(avgprofit), sd(avgprofit)))
data.frame(avgprofit = avgprofit) %>% ggplot(aes(avgprofit, ..density)) +
geom_histogram(color = "black", binwidth = 10) +
ylab("Probability") +
geom_line(data = normal_density, mapping= aes(s,f), color = "red")
n <- 1000
B <- 10000
avgprofit <- replicate(B, {
draws <- sample(c(-1,1), n, replace = T, prob = c(9/19,10/19))
sum(draws)
})
avgprofit
s <- seq(min(avgprofit), max(avgprofit), length = 100)
normal_density <-data.frame(s = s, f= dnorm(s, mean(avgprofit), sd(avgprofit)))
data.frame(avgprofit = avgprofit) %>% ggplot(aes(avgprofit, ..density)) +
geom_histogram(color = "black", binwidth = 10) +
ylab("Probability") +
geom_line(data = normal_density, mapping= aes(s,f), color = "red")
s <- seq(min(avgprofit), max(avgprofit), length = 100)
normal_density <-data.frame(s = s, f= dnorm(s, mean(avgprofit), sd(avgprofit)))
data.frame(avgprofit = avgprofit) %>% ggplot(aes(avgprofit, normal_density)) +
geom_histogram(color = "black", binwidth = 10) +
ylab("Probability") +
geom_line(data = normal_density, mapping= aes(s,f), color = "red")
hist(avgprofit)
s <- seq(min(avgprofit), max(avgprofit), length = 100)
normal_density <-data.frame(s = s, f= dnorm(s, mean(avgprofit), sd(avgprofit)))
data.frame(avgprofit = avgprofit) %>% ggplot(aes(avgprofit, ..density..)) +
geom_histogram(color = "black", binwidth = 10) +
ylab("Probability") +
geom_line(data = normal_density, mapping= aes(s,f), color = "red")
-1*(9/19) + (1-10/19)
-1*(9/19) + (1-(10/19))
-(9/19) + (1-(10/19))
(10/19) - (1-(9/19))
0.7/sqrt(50)
m <- 0.7/sqrt(50)
pnorm(2.2,mean = 2, sd = m, lower.tail = F)
pnorm(2.2,mean = 2, sd = m, lower.tail = T)
pnorm(2.2,mean = 2, sd = m, lower.tail = FALSE)
20/38 - 18/38
1*(10/19)+(-1)(9/19)
1*(10/19)+(-1)*(9/19)
abs(1-(-1))*sqrt(9/19*10/19)
sum_draws <-  1000 * (1*(10/19)+(-1)*(9/19))
sum_draws
sqrt(1000) * abs(1-(-1))*sqrt(9/19*10/19)
pnorm(0, sum_draws, draw_error)
draw_error = sqrt(1000) * abs(1-(-1))*sqrt(9/19*10/19)
sum_draws <-  1000 * (1*(10/19)+(-1)*(9/19))
# $52.63
draw_error = sqrt(1000) * abs(1-(-1))*sqrt(9/19*10/19)
# $31.57
#Chance of losing money, ie value <0
pnorm(0, sum_draws, draw_error)
libray(ggplot2)
str(mpg)
str(mtcars)
tail(mtcars)
ggplot(data = mtcars, aes(x=wt, y=mpg))
ggplot(data = mtcars, aes(x=wt, y=mpg)) +
geom_point()
ggplot(data = mtcars, aes(x=wt, y=mpg)) +
geom_point(col = "blue", size = 1.5)
ggplot(data = mtcars, aes(x=wt, y=mpg)) +
geom_point(col = "blue") +
ggtitle("Car weight vs fuel efficiency")
?ggplot()
?ggtitle()
p <- ggplot(mtcars, aes(mpg, wt, colour = cyl)) + geom_point()
p + labs(colour = "Cylinders")
p + labs(x = "New x label")
ggplot(data = mtcars, aes(x=wt, y=mpg)) + xlab = "Weight" + ylab = "MPG" +
geom_point(col = "blue") +
ggtitle("Car weight vs fuel efficiency")
ggplot(data = mtcars, aes(x=wt, y=mpg, xlab = "Weight", ylab = "MPG"))  +
geom_point(col = "blue") +
ggtitle("Car weight vs fuel efficiency")
ggplot(data = mtcars, aes(x=wt, y=mpg ))  +
xlab("Car weight") +
ylab("MPG") +
geom_point(col = "blue") +
geom_line(x=wt, y =mpg)
ggtitle("Car weight vs fuel efficiency")
ggplot(data = mtcars, aes(x=wt, y=mpg ))  +
xlab("Car weight") +
ylab("MPG") +
geom_point(col = "blue") +
geom_line(x=wt, y =mpg) +
ggtitle("Car weight vs fuel efficiency")
ggplot(data = mtcars, aes(x=wt, y=mpg ))  +
xlab("Car weight") +
ylab("MPG") +
geom_point(col = "blue") +
ggtitle("Car weight vs fuel efficiency")
ggplot(data = mtcars, aes(x=wt, y=mpg ))  +
xlab("Car weight") +
ylab("MPG") +
geom_point(col = "blue") +
ggtitle("Car weight vs fuel efficiency") +
stat_smooth() # linear regression
ggplot(data = mtcars, aes(x=wt, y=mpg ))  +
xlab("Car weight") +
ylab("MPG") +
geom_point(col = "blue") +
ggtitle("Car weight vs fuel efficiency") +
stat_smooth(col = "black") #
?GeomErrorbar()
?Geom_errorbar()
?geom_errorbar()
?cbind()
library(reshape2)
